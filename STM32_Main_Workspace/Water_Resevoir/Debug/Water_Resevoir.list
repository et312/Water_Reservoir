
Water_Resevoir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd8  08007cd8  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd8  08007cd8  00008cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce0  08007ce0  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007ce8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  2000005c  08007d44  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08007d44  00009a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebfd  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6e  00000000  00000000  00017c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00019bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000adb  00000000  00000000  0001a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c6  00000000  00000000  0001b4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100a1  00000000  00000000  00032d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b1d  00000000  00000000  00042e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000dc96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e0c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007558 	.word	0x08007558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08007558 	.word	0x08007558

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DIGITS_Display>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	 int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 800059a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	 int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 80005a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
	 int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 80005b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005b6:	089b      	lsrs	r3, r3, #2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	623b      	str	r3, [r7, #32]
	 int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 80005c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]

	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	76fb      	strb	r3, [r7, #27]
	 int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 80005d6:	7efb      	ldrb	r3, [r7, #27]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
	 int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 80005de:	7efb      	ldrb	r3, [r7, #27]
 80005e0:	085b      	lsrs	r3, r3, #1
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
	 int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80005ea:	7efb      	ldrb	r3, [r7, #27]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
	 int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 80005f6:	7efb      	ldrb	r3, [r7, #27]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	60bb      	str	r3, [r7, #8]

	 if (Abit0 == (0))
 8000602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <DIGITS_Display+0x94>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2120      	movs	r1, #32
 800060c:	483b      	ldr	r0, [pc, #236]	@ (80006fc <DIGITS_Display+0x17c>)
 800060e:	f002 fda9 	bl	8003164 <HAL_GPIO_WritePin>
 8000612:	e004      	b.n	800061e <DIGITS_Display+0x9e>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	4838      	ldr	r0, [pc, #224]	@ (80006fc <DIGITS_Display+0x17c>)
 800061a:	f002 fda3 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Abit1 == (0))
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <DIGITS_Display+0xb0>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	@ 0x40
 8000628:	4834      	ldr	r0, [pc, #208]	@ (80006fc <DIGITS_Display+0x17c>)
 800062a:	f002 fd9b 	bl	8003164 <HAL_GPIO_WritePin>
 800062e:	e004      	b.n	800063a <DIGITS_Display+0xba>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	@ 0x40
 8000634:	4831      	ldr	r0, [pc, #196]	@ (80006fc <DIGITS_Display+0x17c>)
 8000636:	f002 fd95 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Abit2 == (0))
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d105      	bne.n	800064c <DIGITS_Display+0xcc>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	@ 0x80
 8000644:	482d      	ldr	r0, [pc, #180]	@ (80006fc <DIGITS_Display+0x17c>)
 8000646:	f002 fd8d 	bl	8003164 <HAL_GPIO_WritePin>
 800064a:	e004      	b.n	8000656 <DIGITS_Display+0xd6>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	482a      	ldr	r0, [pc, #168]	@ (80006fc <DIGITS_Display+0x17c>)
 8000652:	f002 fd87 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Abit3 == (0))
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d106      	bne.n	800066a <DIGITS_Display+0xea>
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	4826      	ldr	r0, [pc, #152]	@ (80006fc <DIGITS_Display+0x17c>)
 8000664:	f002 fd7e 	bl	8003164 <HAL_GPIO_WritePin>
 8000668:	e005      	b.n	8000676 <DIGITS_Display+0xf6>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000670:	4822      	ldr	r0, [pc, #136]	@ (80006fc <DIGITS_Display+0x17c>)
 8000672:	f002 fd77 	bl	8003164 <HAL_GPIO_WritePin>

	 }


	 if (Bbit0 == (0))
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d106      	bne.n	800068a <DIGITS_Display+0x10a>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000682:	481f      	ldr	r0, [pc, #124]	@ (8000700 <DIGITS_Display+0x180>)
 8000684:	f002 fd6e 	bl	8003164 <HAL_GPIO_WritePin>
 8000688:	e005      	b.n	8000696 <DIGITS_Display+0x116>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000690:	481b      	ldr	r0, [pc, #108]	@ (8000700 <DIGITS_Display+0x180>)
 8000692:	f002 fd67 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Bbit1 == (0))
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <DIGITS_Display+0x12a>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a2:	4817      	ldr	r0, [pc, #92]	@ (8000700 <DIGITS_Display+0x180>)
 80006a4:	f002 fd5e 	bl	8003164 <HAL_GPIO_WritePin>
 80006a8:	e005      	b.n	80006b6 <DIGITS_Display+0x136>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <DIGITS_Display+0x180>)
 80006b2:	f002 fd57 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Bbit2 == (0))
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <DIGITS_Display+0x14a>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c2:	480f      	ldr	r0, [pc, #60]	@ (8000700 <DIGITS_Display+0x180>)
 80006c4:	f002 fd4e 	bl	8003164 <HAL_GPIO_WritePin>
 80006c8:	e005      	b.n	80006d6 <DIGITS_Display+0x156>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <DIGITS_Display+0x180>)
 80006d2:	f002 fd47 	bl	8003164 <HAL_GPIO_WritePin>

	 }
	 if (Bbit3 == (0))
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d105      	bne.n	80006e8 <DIGITS_Display+0x168>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	@ 0x80
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <DIGITS_Display+0x180>)
 80006e2:	f002 fd3f 	bl	8003164 <HAL_GPIO_WritePin>
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);

	 }
}
 80006e6:	e004      	b.n	80006f2 <DIGITS_Display+0x172>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <DIGITS_Display+0x180>)
 80006ee:	f002 fd39 	bl	8003164 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800

08000704 <HCSR04_TRIG_PULSE>:

void HCSR04_TRIG_PULSE(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2110      	movs	r1, #16
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <HCSR04_TRIG_PULSE+0x34>)
 8000710:	f002 fd28 	bl	8003164 <HAL_GPIO_WritePin>
	for (int j = 0; j != 15; ++j) {};
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e002      	b.n	8000720 <HCSR04_TRIG_PULSE+0x1c>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b0f      	cmp	r3, #15
 8000724:	d1f9      	bne.n	800071a <HCSR04_TRIG_PULSE+0x16>
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4803      	ldr	r0, [pc, #12]	@ (8000738 <HCSR04_TRIG_PULSE+0x34>)
 800072c:	f002 fd1a 	bl	8003164 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020400 	.word	0x40020400

0800073c <prompt_and_receive>:

void prompt_and_receive(const char *prompt, volatile int *value) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart6, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fd4a 	bl	80001e0 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <prompt_and_receive+0x44>)
 8000758:	f004 fdb2 	bl	80052c0 <HAL_UART_Transmit>
  rcv_intpt_flag = 0;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <prompt_and_receive+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
  while (!rcv_intpt_flag); // Wait for input
 8000762:	bf00      	nop
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <prompt_and_receive+0x48>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0fa      	beq.n	8000764 <prompt_and_receive+0x28>
  sscanf(buffer, "%d", value); // load value with the inputed characters
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4905      	ldr	r1, [pc, #20]	@ (8000788 <prompt_and_receive+0x4c>)
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <prompt_and_receive+0x50>)
 8000774:	f005 fdca 	bl	800630c <siscanf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000228 	.word	0x20000228
 8000784:	20000474 	.word	0x20000474
 8000788:	08007570 	.word	0x08007570
 800078c:	20000270 	.word	0x20000270

08000790 <print_terminal>:

void print_terminal(char *text) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	sprintf((char *) txd_msg_buffer, text);
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	4808      	ldr	r0, [pc, #32]	@ (80007bc <print_terminal+0x2c>)
 800079c:	f005 fd96 	bl	80062cc <siprintf>
    HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char *)txd_msg_buffer), 100);
 80007a0:	4806      	ldr	r0, [pc, #24]	@ (80007bc <print_terminal+0x2c>)
 80007a2:	f7ff fd1d 	bl	80001e0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	2364      	movs	r3, #100	@ 0x64
 80007ac:	4903      	ldr	r1, [pc, #12]	@ (80007bc <print_terminal+0x2c>)
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <print_terminal+0x30>)
 80007b0:	f004 fd86 	bl	80052c0 <HAL_UART_Transmit>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000478 	.word	0x20000478
 80007c0:	20000228 	.word	0x20000228

080007c4 <display_water_level>:

void display_water_level(int level) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int tens = level / 10;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <display_water_level+0x4c>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1092      	asrs	r2, r2, #2
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	60fb      	str	r3, [r7, #12]
	int ones = level % 10;
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <display_water_level+0x4c>)
 80007e0:	fb83 1302 	smull	r1, r3, r3, r2
 80007e4:	1099      	asrs	r1, r3, #2
 80007e6:	17d3      	asrs	r3, r2, #31
 80007e8:	1ac9      	subs	r1, r1, r3
 80007ea:	460b      	mov	r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	60bb      	str	r3, [r7, #8]

	DIGITS_Display(tens, ones);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff febd 	bl	8000580 <DIGITS_Display>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	66666667 	.word	0x66666667

08000814 <convert_option_to_pwm>:

void convert_option_to_pwm(int *pipe) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if (*pipe == 0) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d103      	bne.n	800082c <convert_option_to_pwm+0x18>
		*pipe = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
	} else if (*pipe == 2) {
		*pipe = 85;
	} else if (*pipe == 3) {
		*pipe = 99;
	}
}
 800082a:	e016      	b.n	800085a <convert_option_to_pwm+0x46>
	} else if (*pipe == 1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d103      	bne.n	800083c <convert_option_to_pwm+0x28>
		*pipe = 70;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2246      	movs	r2, #70	@ 0x46
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	e00e      	b.n	800085a <convert_option_to_pwm+0x46>
	} else if (*pipe == 2) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d103      	bne.n	800084c <convert_option_to_pwm+0x38>
		*pipe = 85;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2255      	movs	r2, #85	@ 0x55
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	e006      	b.n	800085a <convert_option_to_pwm+0x46>
	} else if (*pipe == 3) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d102      	bne.n	800085a <convert_option_to_pwm+0x46>
		*pipe = 99;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2263      	movs	r2, #99	@ 0x63
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <setLEDState>:

void setLEDState(LED_State state) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
    // Turn off all LEDs first
    HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);  // RED
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000878:	4823      	ldr	r0, [pc, #140]	@ (8000908 <setLEDState+0xa0>)
 800087a:	f002 fc73 	bl	8003164 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);  // GRN
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000884:	4820      	ldr	r0, [pc, #128]	@ (8000908 <setLEDState+0xa0>)
 8000886:	f002 fc6d 	bl	8003164 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);  // BLU
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000890:	481d      	ldr	r0, [pc, #116]	@ (8000908 <setLEDState+0xa0>)
 8000892:	f002 fc67 	bl	8003164 <HAL_GPIO_WritePin>

    // Set the desired state
    switch (state) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d82f      	bhi.n	80008fc <setLEDState+0x94>
 800089c:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <setLEDState+0x3c>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008fd 	.word	0x080008fd
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008c7 	.word	0x080008c7
 80008b0:	080008d5 	.word	0x080008d5
 80008b4:	080008e3 	.word	0x080008e3
        case LED_OFF:
            break;
        case LED_RED:
            HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);  // RED on
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008be:	4812      	ldr	r0, [pc, #72]	@ (8000908 <setLEDState+0xa0>)
 80008c0:	f002 fc50 	bl	8003164 <HAL_GPIO_WritePin>
            break;
 80008c4:	e01b      	b.n	80008fe <setLEDState+0x96>
        case LED_GREEN:
            HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_SET);  // GREEN on
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	480e      	ldr	r0, [pc, #56]	@ (8000908 <setLEDState+0xa0>)
 80008ce:	f002 fc49 	bl	8003164 <HAL_GPIO_WritePin>
            break;
 80008d2:	e014      	b.n	80008fe <setLEDState+0x96>
        case LED_BLUE:
            HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);  // BLUE on
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <setLEDState+0xa0>)
 80008dc:	f002 fc42 	bl	8003164 <HAL_GPIO_WritePin>
            break;
 80008e0:	e00d      	b.n	80008fe <setLEDState+0x96>
        case LED_PURPLE:
            HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);  // RED on
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e8:	4807      	ldr	r0, [pc, #28]	@ (8000908 <setLEDState+0xa0>)
 80008ea:	f002 fc3b 	bl	8003164 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);  // BLUE on
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <setLEDState+0xa0>)
 80008f6:	f002 fc35 	bl	8003164 <HAL_GPIO_WritePin>
            break;
 80008fa:	e000      	b.n	80008fe <setLEDState+0x96>
        default:
            break;
 80008fc:	bf00      	nop
    }
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020400 	.word	0x40020400

0800090c <ADC_Select_CH>:

void ADC_Select_CH(int CH) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
	switch(CH)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	f200 814b 	bhi.w	8000bc0 <ADC_Select_CH+0x2b4>
 800092a:	a201      	add	r2, pc, #4	@ (adr r2, 8000930 <ADC_Select_CH+0x24>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000971 	.word	0x08000971
 8000934:	08000993 	.word	0x08000993
 8000938:	080009b5 	.word	0x080009b5
 800093c:	080009d7 	.word	0x080009d7
 8000940:	080009f9 	.word	0x080009f9
 8000944:	08000a1b 	.word	0x08000a1b
 8000948:	08000a3d 	.word	0x08000a3d
 800094c:	08000a5f 	.word	0x08000a5f
 8000950:	08000a81 	.word	0x08000a81
 8000954:	08000aa3 	.word	0x08000aa3
 8000958:	08000ac3 	.word	0x08000ac3
 800095c:	08000ae3 	.word	0x08000ae3
 8000960:	08000b03 	.word	0x08000b03
 8000964:	08000b23 	.word	0x08000b23
 8000968:	08000b43 	.word	0x08000b43
 800096c:	08000b63 	.word	0x08000b63
	{
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	4892      	ldr	r0, [pc, #584]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000980:	f001 fe92 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 80fb 	beq.w	8000b82 <ADC_Select_CH+0x276>
	{
	Error_Handler();
 800098c:	f001 f97e 	bl	8001c8c <Error_Handler>
	}
	break;
 8000990:	e0f7      	b.n	8000b82 <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 8000992:	2301      	movs	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	4889      	ldr	r0, [pc, #548]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 80009a2:	f001 fe81 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80ec 	beq.w	8000b86 <ADC_Select_CH+0x27a>
	{
	Error_Handler();
 80009ae:	f001 f96d 	bl	8001c8c <Error_Handler>
	}
	break;
 80009b2:	e0e8      	b.n	8000b86 <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4619      	mov	r1, r3
 80009c2:	4881      	ldr	r0, [pc, #516]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 80009c4:	f001 fe70 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 80dd 	beq.w	8000b8a <ADC_Select_CH+0x27e>
	{
	Error_Handler();
 80009d0:	f001 f95c 	bl	8001c8c <Error_Handler>
	}
	break;
 80009d4:	e0d9      	b.n	8000b8a <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	4878      	ldr	r0, [pc, #480]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 80009e6:	f001 fe5f 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 80ce 	beq.w	8000b8e <ADC_Select_CH+0x282>
	{
	Error_Handler();
 80009f2:	f001 f94b 	bl	8001c8c <Error_Handler>
	}
	break;
 80009f6:	e0ca      	b.n	8000b8e <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	4870      	ldr	r0, [pc, #448]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000a08:	f001 fe4e 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 80bf 	beq.w	8000b92 <ADC_Select_CH+0x286>
	{
	Error_Handler();
 8000a14:	f001 f93a 	bl	8001c8c <Error_Handler>
	}
	break;
 8000a18:	e0bb      	b.n	8000b92 <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4867      	ldr	r0, [pc, #412]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000a2a:	f001 fe3d 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f000 80b0 	beq.w	8000b96 <ADC_Select_CH+0x28a>
	{
	Error_Handler();
 8000a36:	f001 f929 	bl	8001c8c <Error_Handler>
	}
	break;
 8000a3a:	e0ac      	b.n	8000b96 <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4619      	mov	r1, r3
 8000a4a:	485f      	ldr	r0, [pc, #380]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000a4c:	f001 fe2c 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 80a1 	beq.w	8000b9a <ADC_Select_CH+0x28e>
	{
	Error_Handler();
 8000a58:	f001 f918 	bl	8001c8c <Error_Handler>
	}
	break;
 8000a5c:	e09d      	b.n	8000b9a <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4856      	ldr	r0, [pc, #344]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000a6e:	f001 fe1b 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 8092 	beq.w	8000b9e <ADC_Select_CH+0x292>
	{
	Error_Handler();
 8000a7a:	f001 f907 	bl	8001c8c <Error_Handler>
	}
	break;
 8000a7e:	e08e      	b.n	8000b9e <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	484e      	ldr	r0, [pc, #312]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000a90:	f001 fe0a 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8083 	beq.w	8000ba2 <ADC_Select_CH+0x296>
	{
	Error_Handler();
 8000a9c:	f001 f8f6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000aa0:	e07f      	b.n	8000ba2 <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4845      	ldr	r0, [pc, #276]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000ab2:	f001 fdf9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d074      	beq.n	8000ba6 <ADC_Select_CH+0x29a>
	{
	Error_Handler();
 8000abc:	f001 f8e6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000ac0:	e071      	b.n	8000ba6 <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	483d      	ldr	r0, [pc, #244]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000ad2:	f001 fde9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d066      	beq.n	8000baa <ADC_Select_CH+0x29e>
	{
	Error_Handler();
 8000adc:	f001 f8d6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000ae0:	e063      	b.n	8000baa <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	4835      	ldr	r0, [pc, #212]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000af2:	f001 fdd9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d058      	beq.n	8000bae <ADC_Select_CH+0x2a2>
	{
	Error_Handler();
 8000afc:	f001 f8c6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000b00:	e055      	b.n	8000bae <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 8000b02:	230c      	movs	r3, #12
 8000b04:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482d      	ldr	r0, [pc, #180]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000b12:	f001 fdc9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d04a      	beq.n	8000bb2 <ADC_Select_CH+0x2a6>
	{
	Error_Handler();
 8000b1c:	f001 f8b6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000b20:	e047      	b.n	8000bb2 <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 8000b22:	230d      	movs	r3, #13
 8000b24:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4825      	ldr	r0, [pc, #148]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000b32:	f001 fdb9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d03c      	beq.n	8000bb6 <ADC_Select_CH+0x2aa>
	{
	Error_Handler();
 8000b3c:	f001 f8a6 	bl	8001c8c <Error_Handler>
	}
	break;
 8000b40:	e039      	b.n	8000bb6 <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 8000b42:	230e      	movs	r3, #14
 8000b44:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481d      	ldr	r0, [pc, #116]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000b52:	f001 fda9 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d02e      	beq.n	8000bba <ADC_Select_CH+0x2ae>
	{
	Error_Handler();
 8000b5c:	f001 f896 	bl	8001c8c <Error_Handler>
	}
	break;
 8000b60:	e02b      	b.n	8000bba <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 8000b62:	230f      	movs	r3, #15
 8000b64:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4815      	ldr	r0, [pc, #84]	@ (8000bc8 <ADC_Select_CH+0x2bc>)
 8000b72:	f001 fd99 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d020      	beq.n	8000bbe <ADC_Select_CH+0x2b2>
	{
	Error_Handler();
 8000b7c:	f001 f886 	bl	8001c8c <Error_Handler>
	}
	break;
 8000b80:	e01d      	b.n	8000bbe <ADC_Select_CH+0x2b2>
	break;
 8000b82:	bf00      	nop
 8000b84:	e01c      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b86:	bf00      	nop
 8000b88:	e01a      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b8a:	bf00      	nop
 8000b8c:	e018      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b8e:	bf00      	nop
 8000b90:	e016      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b92:	bf00      	nop
 8000b94:	e014      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b96:	bf00      	nop
 8000b98:	e012      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b9a:	bf00      	nop
 8000b9c:	e010      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000b9e:	bf00      	nop
 8000ba0:	e00e      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000ba2:	bf00      	nop
 8000ba4:	e00c      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000ba6:	bf00      	nop
 8000ba8:	e00a      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000baa:	bf00      	nop
 8000bac:	e008      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000bae:	bf00      	nop
 8000bb0:	e006      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000bb2:	bf00      	nop
 8000bb4:	e004      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000bb6:	bf00      	nop
 8000bb8:	e002      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000bba:	bf00      	nop
 8000bbc:	e000      	b.n	8000bc0 <ADC_Select_CH+0x2b4>
	break;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000078 	.word	0x20000078

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08f      	sub	sp, #60	@ 0x3c
 8000bd0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	// Servo
	int TIM2_Ch1_DCVAL = 500;
 8000bd2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bd6:	61fb      	str	r3, [r7, #28]
	int TIM2_Ch1_STEP = 20;
 8000bd8:	2314      	movs	r3, #20
 8000bda:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f001 fb0a 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 fc32 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 fec6 	bl	8001974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 fe70 	bl	80018cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000bec:	f000 fe98 	bl	8001920 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bf0:	f000 fc8a 	bl	8001508 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bf4:	f000 fcda 	bl	80015ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bf8:	f000 fd4e 	bl	8001698 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000bfc:	f000 fe1e 	bl	800183c <MX_TIM10_Init>
  MX_TIM5_Init();
 8000c00:	f000 fdce 	bl	80017a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 8000c04:	48a3      	ldr	r0, [pc, #652]	@ (8000e94 <main+0x2c8>)
 8000c06:	f002 ff91 	bl	8003b2c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	48a1      	ldr	r0, [pc, #644]	@ (8000e94 <main+0x2c8>)
 8000c0e:	f003 f8f3 	bl	8003df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c12:	2108      	movs	r1, #8
 8000c14:	489f      	ldr	r0, [pc, #636]	@ (8000e94 <main+0x2c8>)
 8000c16:	f003 f8ef 	bl	8003df8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000c1a:	489f      	ldr	r0, [pc, #636]	@ (8000e98 <main+0x2cc>)
 8000c1c:	f002 ffd6 	bl	8003bcc <HAL_TIM_Base_Start>
  TIM2->PSC = 16-1;
 8000c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c24:	220f      	movs	r2, #15
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 20000-1;
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c2c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR1 = TIM2_Ch1_DCVAL;
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	6353      	str	r3, [r2, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4896      	ldr	r0, [pc, #600]	@ (8000e98 <main+0x2cc>)
 8000c3e:	f003 f8db 	bl	8003df8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Init(&htim10);
 8000c42:	4896      	ldr	r0, [pc, #600]	@ (8000e9c <main+0x2d0>)
 8000c44:	f002 ff72 	bl	8003b2c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim10);
 8000c48:	4894      	ldr	r0, [pc, #592]	@ (8000e9c <main+0x2d0>)
 8000c4a:	f002 ffbf 	bl	8003bcc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4892      	ldr	r0, [pc, #584]	@ (8000e9c <main+0x2d0>)
 8000c52:	f003 f9db 	bl	800400c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000c56:	4892      	ldr	r0, [pc, #584]	@ (8000ea0 <main+0x2d4>)
 8000c58:	f003 f812 	bl	8003c80 <HAL_TIM_Base_Start_IT>

  // HCSR04
  uint16_t time_diff = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	82fb      	strh	r3, [r7, #22]
  uint16_t distance = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	82bb      	strh	r3, [r7, #20]
  uint16_t empty_distance = 10; // cm
 8000c64:	230a      	movs	r3, #10
 8000c66:	827b      	strh	r3, [r7, #18]
  uint16_t full_distance = 50; // cm
 8000c68:	2332      	movs	r3, #50	@ 0x32
 8000c6a:	823b      	strh	r3, [r7, #16]
  int empty = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24

  int pump_not_running = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]

  // Setup mode operations
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	488a      	ldr	r0, [pc, #552]	@ (8000ea4 <main+0x2d8>)
 8000c7a:	f002 fa73 	bl	8003164 <HAL_GPIO_WritePin>
  TIM3->CCR1 = 0;
 8000c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ea8 <main+0x2dc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR3 = 0;
 8000c84:	4b88      	ldr	r3, [pc, #544]	@ (8000ea8 <main+0x2dc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  // Clear terminal
  print_terminal("\033[2J\033[H");
 8000c8a:	4888      	ldr	r0, [pc, #544]	@ (8000eac <main+0x2e0>)
 8000c8c:	f7ff fd80 	bl	8000790 <print_terminal>

  print_terminal("SETUP MODE \r\n");
 8000c90:	4887      	ldr	r0, [pc, #540]	@ (8000eb0 <main+0x2e4>)
 8000c92:	f7ff fd7d 	bl	8000790 <print_terminal>

  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4986      	ldr	r1, [pc, #536]	@ (8000eb4 <main+0x2e8>)
 8000c9a:	4887      	ldr	r0, [pc, #540]	@ (8000eb8 <main+0x2ec>)
 8000c9c:	f004 fb9b 	bl	80053d6 <HAL_UART_Receive_IT>
  prompt_and_receive("Inlet Pump PWM (options: 0 to 3): ", &inlet_pwm);
 8000ca0:	4986      	ldr	r1, [pc, #536]	@ (8000ebc <main+0x2f0>)
 8000ca2:	4887      	ldr	r0, [pc, #540]	@ (8000ec0 <main+0x2f4>)
 8000ca4:	f7ff fd4a 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pump 1 PWM (options: 0 to 3): ", &zone1_pwm);
 8000ca8:	4986      	ldr	r1, [pc, #536]	@ (8000ec4 <main+0x2f8>)
 8000caa:	4887      	ldr	r0, [pc, #540]	@ (8000ec8 <main+0x2fc>)
 8000cac:	f7ff fd46 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pump 2 PWM (options: 0 to 3): ", &zone2_pwm);
 8000cb0:	4986      	ldr	r1, [pc, #536]	@ (8000ecc <main+0x300>)
 8000cb2:	4887      	ldr	r0, [pc, #540]	@ (8000ed0 <main+0x304>)
 8000cb4:	f7ff fd42 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pump 3 PWM (options: 0 to 3): ", &zone3_pwm);
 8000cb8:	4986      	ldr	r1, [pc, #536]	@ (8000ed4 <main+0x308>)
 8000cba:	4887      	ldr	r0, [pc, #540]	@ (8000ed8 <main+0x30c>)
 8000cbc:	f7ff fd3e 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 0  Pump FIRST HOUR (options: 00-23): ", &inlet_start);
 8000cc0:	4986      	ldr	r1, [pc, #536]	@ (8000edc <main+0x310>)
 8000cc2:	4887      	ldr	r0, [pc, #540]	@ (8000ee0 <main+0x314>)
 8000cc4:	f7ff fd3a 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 0  Pump LAST HOUR (options: 00-23): ", &inlet_stop);
 8000cc8:	4986      	ldr	r1, [pc, #536]	@ (8000ee4 <main+0x318>)
 8000cca:	4887      	ldr	r0, [pc, #540]	@ (8000ee8 <main+0x31c>)
 8000ccc:	f7ff fd36 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 1  Pump FIRST HOUR (options: 00-23): ", &zone1_start);
 8000cd0:	4986      	ldr	r1, [pc, #536]	@ (8000eec <main+0x320>)
 8000cd2:	4887      	ldr	r0, [pc, #540]	@ (8000ef0 <main+0x324>)
 8000cd4:	f7ff fd32 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 1  Pump LAST HOUR (options: 00-23): ", &zone1_stop);
 8000cd8:	4986      	ldr	r1, [pc, #536]	@ (8000ef4 <main+0x328>)
 8000cda:	4887      	ldr	r0, [pc, #540]	@ (8000ef8 <main+0x32c>)
 8000cdc:	f7ff fd2e 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 2  Pump FIRST HOUR (options: 00-23): ", &zone2_start);
 8000ce0:	4986      	ldr	r1, [pc, #536]	@ (8000efc <main+0x330>)
 8000ce2:	4887      	ldr	r0, [pc, #540]	@ (8000f00 <main+0x334>)
 8000ce4:	f7ff fd2a 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 2  Pump LAST HOUR (options: 00-23): ", &zone2_stop);
 8000ce8:	4986      	ldr	r1, [pc, #536]	@ (8000f04 <main+0x338>)
 8000cea:	4887      	ldr	r0, [pc, #540]	@ (8000f08 <main+0x33c>)
 8000cec:	f7ff fd26 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 3  Pump FIRST HOUR (options: 00-23): ", &zone3_start);
 8000cf0:	4986      	ldr	r1, [pc, #536]	@ (8000f0c <main+0x340>)
 8000cf2:	4887      	ldr	r0, [pc, #540]	@ (8000f10 <main+0x344>)
 8000cf4:	f7ff fd22 	bl	800073c <prompt_and_receive>
  prompt_and_receive("Pipeline 3  Pump LAST HOUR (options: 00-23): ", &zone3_stop);
 8000cf8:	4986      	ldr	r1, [pc, #536]	@ (8000f14 <main+0x348>)
 8000cfa:	4887      	ldr	r0, [pc, #540]	@ (8000f18 <main+0x34c>)
 8000cfc:	f7ff fd1e 	bl	800073c <prompt_and_receive>

  convert_option_to_pwm(&inlet_pwm);
 8000d00:	486e      	ldr	r0, [pc, #440]	@ (8000ebc <main+0x2f0>)
 8000d02:	f7ff fd87 	bl	8000814 <convert_option_to_pwm>
  convert_option_to_pwm(&zone1_pwm);
 8000d06:	486f      	ldr	r0, [pc, #444]	@ (8000ec4 <main+0x2f8>)
 8000d08:	f7ff fd84 	bl	8000814 <convert_option_to_pwm>
  convert_option_to_pwm(&zone2_pwm);
 8000d0c:	486f      	ldr	r0, [pc, #444]	@ (8000ecc <main+0x300>)
 8000d0e:	f7ff fd81 	bl	8000814 <convert_option_to_pwm>
  convert_option_to_pwm(&zone3_pwm);
 8000d12:	4870      	ldr	r0, [pc, #448]	@ (8000ed4 <main+0x308>)
 8000d14:	f7ff fd7e 	bl	8000814 <convert_option_to_pwm>

  sprintf(txd_msg_buffer, "\nPrinting SETUP Parameters \r\n\n");
 8000d18:	4980      	ldr	r1, [pc, #512]	@ (8000f1c <main+0x350>)
 8000d1a:	4881      	ldr	r0, [pc, #516]	@ (8000f20 <main+0x354>)
 8000d1c:	f005 fad6 	bl	80062cc <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 8000d20:	487f      	ldr	r0, [pc, #508]	@ (8000f20 <main+0x354>)
 8000d22:	f7ff fa5d 	bl	80001e0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	497c      	ldr	r1, [pc, #496]	@ (8000f20 <main+0x354>)
 8000d30:	4861      	ldr	r0, [pc, #388]	@ (8000eb8 <main+0x2ec>)
 8000d32:	f004 fac5 	bl	80052c0 <HAL_UART_Transmit>
  if (inlet_pwm == 0) {
 8000d36:	4b61      	ldr	r3, [pc, #388]	@ (8000ebc <main+0x2f0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d108      	bne.n	8000d50 <main+0x184>
	  sprintf(txd_msg_buffer, "PIPELINE: INLET	Pump PWM: Manual Control	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", inlet_start, inlet_stop);
 8000d3e:	4b67      	ldr	r3, [pc, #412]	@ (8000edc <main+0x310>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b68      	ldr	r3, [pc, #416]	@ (8000ee4 <main+0x318>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4977      	ldr	r1, [pc, #476]	@ (8000f24 <main+0x358>)
 8000d48:	4875      	ldr	r0, [pc, #468]	@ (8000f20 <main+0x354>)
 8000d4a:	f005 fabf 	bl	80062cc <siprintf>
 8000d4e:	e00b      	b.n	8000d68 <main+0x19c>
  } else {
	  sprintf(txd_msg_buffer, "PIPELINE: INLET	Pump PWM: %d	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", inlet_pwm, inlet_start, inlet_stop);
 8000d50:	4b5a      	ldr	r3, [pc, #360]	@ (8000ebc <main+0x2f0>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b61      	ldr	r3, [pc, #388]	@ (8000edc <main+0x310>)
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	4b62      	ldr	r3, [pc, #392]	@ (8000ee4 <main+0x318>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4971      	ldr	r1, [pc, #452]	@ (8000f28 <main+0x35c>)
 8000d62:	486f      	ldr	r0, [pc, #444]	@ (8000f20 <main+0x354>)
 8000d64:	f005 fab2 	bl	80062cc <siprintf>
  }
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 8000d68:	486d      	ldr	r0, [pc, #436]	@ (8000f20 <main+0x354>)
 8000d6a:	f7ff fa39 	bl	80001e0 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	496a      	ldr	r1, [pc, #424]	@ (8000f20 <main+0x354>)
 8000d78:	484f      	ldr	r0, [pc, #316]	@ (8000eb8 <main+0x2ec>)
 8000d7a:	f004 faa1 	bl	80052c0 <HAL_UART_Transmit>
  if (zone1_pwm == 0) {
 8000d7e:	4b51      	ldr	r3, [pc, #324]	@ (8000ec4 <main+0x2f8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d108      	bne.n	8000d98 <main+0x1cc>
	  sprintf(txd_msg_buffer, "PIPELINE: 1	Pump PWM: Manual Control	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", zone1_start, zone1_stop);
 8000d86:	4b59      	ldr	r3, [pc, #356]	@ (8000eec <main+0x320>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef4 <main+0x328>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4967      	ldr	r1, [pc, #412]	@ (8000f2c <main+0x360>)
 8000d90:	4863      	ldr	r0, [pc, #396]	@ (8000f20 <main+0x354>)
 8000d92:	f005 fa9b 	bl	80062cc <siprintf>
 8000d96:	e00b      	b.n	8000db0 <main+0x1e4>
  } else {
	  sprintf(txd_msg_buffer, "PIPELINE: 1	Pump PWM: %d	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", zone1_pwm, zone1_start, zone1_stop);
 8000d98:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <main+0x2f8>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b53      	ldr	r3, [pc, #332]	@ (8000eec <main+0x320>)
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	4b54      	ldr	r3, [pc, #336]	@ (8000ef4 <main+0x328>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	4961      	ldr	r1, [pc, #388]	@ (8000f30 <main+0x364>)
 8000daa:	485d      	ldr	r0, [pc, #372]	@ (8000f20 <main+0x354>)
 8000dac:	f005 fa8e 	bl	80062cc <siprintf>
  }
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 8000db0:	485b      	ldr	r0, [pc, #364]	@ (8000f20 <main+0x354>)
 8000db2:	f7ff fa15 	bl	80001e0 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	4958      	ldr	r1, [pc, #352]	@ (8000f20 <main+0x354>)
 8000dc0:	483d      	ldr	r0, [pc, #244]	@ (8000eb8 <main+0x2ec>)
 8000dc2:	f004 fa7d 	bl	80052c0 <HAL_UART_Transmit>
  if (zone2_pwm == 0) {
 8000dc6:	4b41      	ldr	r3, [pc, #260]	@ (8000ecc <main+0x300>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d108      	bne.n	8000de0 <main+0x214>
	  sprintf(txd_msg_buffer, "PIPELINE: 2	Pump PWM: Manual Control	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n",  zone2_start, zone2_stop);
 8000dce:	4b4b      	ldr	r3, [pc, #300]	@ (8000efc <main+0x330>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f04 <main+0x338>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4957      	ldr	r1, [pc, #348]	@ (8000f34 <main+0x368>)
 8000dd8:	4851      	ldr	r0, [pc, #324]	@ (8000f20 <main+0x354>)
 8000dda:	f005 fa77 	bl	80062cc <siprintf>
 8000dde:	e00b      	b.n	8000df8 <main+0x22c>
  } else {
	  sprintf(txd_msg_buffer, "PIPELINE: 2	Pump PWM: %d	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n",  zone2_pwm, zone2_start, zone2_stop);
 8000de0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <main+0x300>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b45      	ldr	r3, [pc, #276]	@ (8000efc <main+0x330>)
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	4b46      	ldr	r3, [pc, #280]	@ (8000f04 <main+0x338>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	460b      	mov	r3, r1
 8000df0:	4951      	ldr	r1, [pc, #324]	@ (8000f38 <main+0x36c>)
 8000df2:	484b      	ldr	r0, [pc, #300]	@ (8000f20 <main+0x354>)
 8000df4:	f005 fa6a 	bl	80062cc <siprintf>
  }
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 8000df8:	4849      	ldr	r0, [pc, #292]	@ (8000f20 <main+0x354>)
 8000dfa:	f7ff f9f1 	bl	80001e0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	4946      	ldr	r1, [pc, #280]	@ (8000f20 <main+0x354>)
 8000e08:	482b      	ldr	r0, [pc, #172]	@ (8000eb8 <main+0x2ec>)
 8000e0a:	f004 fa59 	bl	80052c0 <HAL_UART_Transmit>
  if (zone3_pwm == 0) {
 8000e0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <main+0x308>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <main+0x25c>
	  sprintf(txd_msg_buffer, "PIPELINE: 3	Pump PWM: Manual Control	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", zone3_start, zone3_stop);
 8000e16:	4b3d      	ldr	r3, [pc, #244]	@ (8000f0c <main+0x340>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <main+0x348>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4947      	ldr	r1, [pc, #284]	@ (8000f3c <main+0x370>)
 8000e20:	483f      	ldr	r0, [pc, #252]	@ (8000f20 <main+0x354>)
 8000e22:	f005 fa53 	bl	80062cc <siprintf>
 8000e26:	e00b      	b.n	8000e40 <main+0x274>
  } else {
	  sprintf(txd_msg_buffer, "PIPELINE: 3	Pump PWM: %d	Pump FIRST HOUR: %d	Pump LAST HOUR: %d\r\n", zone3_pwm, zone3_start, zone3_stop);
 8000e28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <main+0x308>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <main+0x340>)
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <main+0x348>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	460b      	mov	r3, r1
 8000e38:	4941      	ldr	r1, [pc, #260]	@ (8000f40 <main+0x374>)
 8000e3a:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <main+0x354>)
 8000e3c:	f005 fa46 	bl	80062cc <siprintf>
  }

  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 8000e40:	4837      	ldr	r0, [pc, #220]	@ (8000f20 <main+0x354>)
 8000e42:	f7ff f9cd 	bl	80001e0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	4934      	ldr	r1, [pc, #208]	@ (8000f20 <main+0x354>)
 8000e50:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <main+0x2ec>)
 8000e52:	f004 fa35 	bl	80052c0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, "\r\n\n", 2, HAL_MAX_DELAY);
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4939      	ldr	r1, [pc, #228]	@ (8000f44 <main+0x378>)
 8000e5e:	4816      	ldr	r0, [pc, #88]	@ (8000eb8 <main+0x2ec>)
 8000e60:	f004 fa2e 	bl	80052c0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, "SETUP is done. Press Blue Button for RUN MODE \r\n\n", 46, HAL_MAX_DELAY);
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	222e      	movs	r2, #46	@ 0x2e
 8000e6a:	4937      	ldr	r1, [pc, #220]	@ (8000f48 <main+0x37c>)
 8000e6c:	4812      	ldr	r0, [pc, #72]	@ (8000eb8 <main+0x2ec>)
 8000e6e:	f004 fa27 	bl	80052c0 <HAL_UART_Transmit>

  while (1) {
	  // Toggle MCU LED
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000e72:	2120      	movs	r1, #32
 8000e74:	480b      	ldr	r0, [pc, #44]	@ (8000ea4 <main+0x2d8>)
 8000e76:	f002 f98e 	bl	8003196 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e7e:	f001 fa2b 	bl	80022d8 <HAL_Delay>

	  // Check for button press
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8000e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e86:	4831      	ldr	r0, [pc, #196]	@ (8000f4c <main+0x380>)
 8000e88:	f002 f954 	bl	8003134 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d05e      	beq.n	8000f50 <main+0x384>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000e92:	e7ee      	b.n	8000e72 <main+0x2a6>
 8000e94:	20000108 	.word	0x20000108
 8000e98:	200000c0 	.word	0x200000c0
 8000e9c:	20000198 	.word	0x20000198
 8000ea0:	20000150 	.word	0x20000150
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	08007574 	.word	0x08007574
 8000eb0:	0800757c 	.word	0x0800757c
 8000eb4:	20000878 	.word	0x20000878
 8000eb8:	20000228 	.word	0x20000228
 8000ebc:	20000884 	.word	0x20000884
 8000ec0:	0800758c 	.word	0x0800758c
 8000ec4:	20000888 	.word	0x20000888
 8000ec8:	080075b0 	.word	0x080075b0
 8000ecc:	2000088c 	.word	0x2000088c
 8000ed0:	080075d0 	.word	0x080075d0
 8000ed4:	20000890 	.word	0x20000890
 8000ed8:	080075f0 	.word	0x080075f0
 8000edc:	20000894 	.word	0x20000894
 8000ee0:	08007610 	.word	0x08007610
 8000ee4:	20000898 	.word	0x20000898
 8000ee8:	08007640 	.word	0x08007640
 8000eec:	2000089c 	.word	0x2000089c
 8000ef0:	08007670 	.word	0x08007670
 8000ef4:	200008a0 	.word	0x200008a0
 8000ef8:	080076a0 	.word	0x080076a0
 8000efc:	200008a4 	.word	0x200008a4
 8000f00:	080076d0 	.word	0x080076d0
 8000f04:	200008a8 	.word	0x200008a8
 8000f08:	08007700 	.word	0x08007700
 8000f0c:	200008ac 	.word	0x200008ac
 8000f10:	08007730 	.word	0x08007730
 8000f14:	200008b0 	.word	0x200008b0
 8000f18:	08007760 	.word	0x08007760
 8000f1c:	08007790 	.word	0x08007790
 8000f20:	20000478 	.word	0x20000478
 8000f24:	080077b0 	.word	0x080077b0
 8000f28:	08007804 	.word	0x08007804
 8000f2c:	0800784c 	.word	0x0800784c
 8000f30:	0800789c 	.word	0x0800789c
 8000f34:	080078e0 	.word	0x080078e0
 8000f38:	08007930 	.word	0x08007930
 8000f3c:	08007974 	.word	0x08007974
 8000f40:	080079c4 	.word	0x080079c4
 8000f44:	08007a08 	.word	0x08007a08
 8000f48:	08007a0c 	.word	0x08007a0c
 8000f4c:	40020800 	.word	0x40020800
		  break;
 8000f50:	bf00      	nop
	  }
  }


  // Run mode
  print_terminal("\r\n\nRUN MODE \r\n");
 8000f52:	489e      	ldr	r0, [pc, #632]	@ (80011cc <main+0x600>)
 8000f54:	f7ff fc1c 	bl	8000790 <print_terminal>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	489c      	ldr	r0, [pc, #624]	@ (80011d0 <main+0x604>)
 8000f5e:	f002 f901 	bl	8003164 <HAL_GPIO_WritePin>

  clock_hours = 0;
 8000f62:	4b9c      	ldr	r3, [pc, #624]	@ (80011d4 <main+0x608>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
  clock_mins = 0;
 8000f68:	4b9b      	ldr	r3, [pc, #620]	@ (80011d8 <main+0x60c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
  clock_secs = 0;
 8000f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80011dc <main+0x610>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

  print_terminal("WALL CLOCK (hr):, ZONE/INLET:, MOTOR Speed %% PWM:, MOTOR RPM:, WATER DEPTH (%%):\r\n");
 8000f74:	489a      	ldr	r0, [pc, #616]	@ (80011e0 <main+0x614>)
 8000f76:	f7ff fc0b 	bl	8000790 <print_terminal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (clock_hours == 24) {
 8000f7a:	4b96      	ldr	r3, [pc, #600]	@ (80011d4 <main+0x608>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b18      	cmp	r3, #24
 8000f82:	f000 81fa 	beq.w	800137a <main+0x7ae>
		  break;
	  }
	  if (clock_mins == 0) {
 8000f86:	4b94      	ldr	r3, [pc, #592]	@ (80011d8 <main+0x60c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <main+0x3d0>
		  pump_not_running = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
		  rpm_tick_count = 0;
 8000f94:	4b93      	ldr	r3, [pc, #588]	@ (80011e4 <main+0x618>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e059      	b.n	8001050 <main+0x484>
	  } else if (clock_mins == 15) {
 8000f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80011d8 <main+0x60c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d103      	bne.n	8000fae <main+0x3e2>
		  rpm_tick_count = 0;
 8000fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80011e4 <main+0x618>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e050      	b.n	8001050 <main+0x484>
	  } else if (clock_mins == 55) {
 8000fae:	4b8a      	ldr	r3, [pc, #552]	@ (80011d8 <main+0x60c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b37      	cmp	r3, #55	@ 0x37
 8000fb6:	d113      	bne.n	8000fe0 <main+0x414>
		  current_motor_rpm = rpm_tick_count / TICKS_PER_REV * 60 / 8;
 8000fb8:	4b8a      	ldr	r3, [pc, #552]	@ (80011e4 <main+0x618>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a8a      	ldr	r2, [pc, #552]	@ (80011e8 <main+0x61c>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	10d2      	asrs	r2, r2, #3
 8000fc4:	17db      	asrs	r3, r3, #31
 8000fc6:	1ad2      	subs	r2, r2, r3
 8000fc8:	4613      	mov	r3, r2
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da00      	bge.n	8000fd6 <main+0x40a>
 8000fd4:	3307      	adds	r3, #7
 8000fd6:	10db      	asrs	r3, r3, #3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b84      	ldr	r3, [pc, #528]	@ (80011ec <main+0x620>)
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e037      	b.n	8001050 <main+0x484>
	  } else if (clock_mins == 59) {
 8000fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80011d8 <main+0x60c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fe8:	d132      	bne.n	8001050 <main+0x484>
		  if (pump_not_running) {
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00f      	beq.n	8001010 <main+0x444>
			  sprintf(txd_msg_buffer, "     %d                                                  %d              %d \r\n", clock_hours, current_motor_rpm, current_water_depth);
 8000ff0:	4b78      	ldr	r3, [pc, #480]	@ (80011d4 <main+0x608>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80011ec <main+0x620>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80011f0 <main+0x624>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4613      	mov	r3, r2
 8001004:	460a      	mov	r2, r1
 8001006:	497b      	ldr	r1, [pc, #492]	@ (80011f4 <main+0x628>)
 8001008:	487b      	ldr	r0, [pc, #492]	@ (80011f8 <main+0x62c>)
 800100a:	f005 f95f 	bl	80062cc <siprintf>
 800100e:	e014      	b.n	800103a <main+0x46e>
		  } else {
			  sprintf(txd_msg_buffer, "     %d               %d              %d                 %d              %d \r\n", clock_hours, current_zone, current_motor_pwm, current_motor_rpm, current_water_depth);
 8001010:	4b70      	ldr	r3, [pc, #448]	@ (80011d4 <main+0x608>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461c      	mov	r4, r3
 8001018:	4b78      	ldr	r3, [pc, #480]	@ (80011fc <main+0x630>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	4b78      	ldr	r3, [pc, #480]	@ (8001200 <main+0x634>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a72      	ldr	r2, [pc, #456]	@ (80011ec <main+0x620>)
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4972      	ldr	r1, [pc, #456]	@ (80011f0 <main+0x624>)
 8001026:	6809      	ldr	r1, [r1, #0]
 8001028:	9102      	str	r1, [sp, #8]
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	4622      	mov	r2, r4
 8001032:	4974      	ldr	r1, [pc, #464]	@ (8001204 <main+0x638>)
 8001034:	4870      	ldr	r0, [pc, #448]	@ (80011f8 <main+0x62c>)
 8001036:	f005 f949 	bl	80062cc <siprintf>
		  }
		  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), HAL_MAX_DELAY);
 800103a:	486f      	ldr	r0, [pc, #444]	@ (80011f8 <main+0x62c>)
 800103c:	f7ff f8d0 	bl	80001e0 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	496b      	ldr	r1, [pc, #428]	@ (80011f8 <main+0x62c>)
 800104a:	486f      	ldr	r0, [pc, #444]	@ (8001208 <main+0x63c>)
 800104c:	f004 f938 	bl	80052c0 <HAL_UART_Transmit>
	  }
	  hcsr04_Rx_flag = 0;
 8001050:	4b6e      	ldr	r3, [pc, #440]	@ (800120c <main+0x640>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
	  first_edge = 0;
 8001056:	4b6e      	ldr	r3, [pc, #440]	@ (8001210 <main+0x644>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	  time_edge1 = 0;
 800105c:	4b6d      	ldr	r3, [pc, #436]	@ (8001214 <main+0x648>)
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]
	  time_edge2 = 0;
 8001062:	4b6d      	ldr	r3, [pc, #436]	@ (8001218 <main+0x64c>)
 8001064:	2200      	movs	r2, #0
 8001066:	801a      	strh	r2, [r3, #0]
	  time_diff = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	82fb      	strh	r3, [r7, #22]
	  distance = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	82bb      	strh	r3, [r7, #20]

	  HCSR04_TRIG_PULSE();
 8001070:	f7ff fb48 	bl	8000704 <HCSR04_TRIG_PULSE>

	  while(hcsr04_Rx_flag == 0) {};
 8001074:	bf00      	nop
 8001076:	4b65      	ldr	r3, [pc, #404]	@ (800120c <main+0x640>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0fa      	beq.n	8001076 <main+0x4aa>

	  time_diff = time_edge2 - time_edge1;
 8001080:	4b65      	ldr	r3, [pc, #404]	@ (8001218 <main+0x64c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <main+0x648>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	82fb      	strh	r3, [r7, #22]
	  distance = time_diff / 58;
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	4a62      	ldr	r2, [pc, #392]	@ (800121c <main+0x650>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	82bb      	strh	r3, [r7, #20]

	  current_water_depth = (distance - empty_distance) * 100 / full_distance;
 800109c:	8aba      	ldrh	r2, [r7, #20]
 800109e:	8a7b      	ldrh	r3, [r7, #18]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2264      	movs	r2, #100	@ 0x64
 80010a4:	fb03 f202 	mul.w	r2, r3, r2
 80010a8:	8a3b      	ldrh	r3, [r7, #16]
 80010aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ae:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <main+0x624>)
 80010b0:	6013      	str	r3, [r2, #0]

	  if (current_water_depth >= full_distance) {
 80010b2:	8a3a      	ldrh	r2, [r7, #16]
 80010b4:	4b4e      	ldr	r3, [pc, #312]	@ (80011f0 <main+0x624>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dc02      	bgt.n	80010c2 <main+0x4f6>
		  current_water_depth = 99;
 80010bc:	4b4c      	ldr	r3, [pc, #304]	@ (80011f0 <main+0x624>)
 80010be:	2263      	movs	r2, #99	@ 0x63
 80010c0:	601a      	str	r2, [r3, #0]
	  }

	  display_water_level(current_water_depth);
 80010c2:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <main+0x624>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fb7c 	bl	80007c4 <display_water_level>

	  // Special case: reservoir is empty
	  if (distance <= empty_distance) {
 80010cc:	8aba      	ldrh	r2, [r7, #20]
 80010ce:	8a7b      	ldrh	r3, [r7, #18]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d802      	bhi.n	80010da <main+0x50e>
		  empty = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
		  break;
 80010d8:	e150      	b.n	800137c <main+0x7b0>
	  }


	  // Check current pipe
	  if (clock_hours >= inlet_start && clock_hours <= inlet_stop) {
 80010da:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <main+0x608>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <main+0x654>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	db15      	blt.n	8001116 <main+0x54a>
 80010ea:	4b3a      	ldr	r3, [pc, #232]	@ (80011d4 <main+0x608>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001224 <main+0x658>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dc0d      	bgt.n	8001116 <main+0x54a>
		  setLEDState(LED_PURPLE);
 80010fa:	2004      	movs	r0, #4
 80010fc:	f7ff fbb4 	bl	8000868 <setLEDState>
		  current_zone = 0;
 8001100:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <main+0x630>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
		  pump_not_running = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
		  TIM2->CCR1 = 500;
 800110a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001112:	635a      	str	r2, [r3, #52]	@ 0x34
 8001114:	e099      	b.n	800124a <main+0x67e>
	  } else if (clock_hours >= zone1_start && clock_hours <= zone1_stop) {
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <main+0x608>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4b42      	ldr	r3, [pc, #264]	@ (8001228 <main+0x65c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	db15      	blt.n	8001152 <main+0x586>
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <main+0x608>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <main+0x660>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	dc0d      	bgt.n	8001152 <main+0x586>
		  setLEDState(LED_RED);
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff fb96 	bl	8000868 <setLEDState>
		  current_zone = 1;
 800113c:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <main+0x630>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
		  pump_not_running = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
		  TIM2->CCR1 = 1300;
 8001146:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800114a:	f240 5214 	movw	r2, #1300	@ 0x514
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001150:	e07b      	b.n	800124a <main+0x67e>
	  } else if (clock_hours >= zone2_start && clock_hours <= zone2_stop) {
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <main+0x608>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <main+0x664>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	db15      	blt.n	800118e <main+0x5c2>
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <main+0x608>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <main+0x668>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	dc0d      	bgt.n	800118e <main+0x5c2>
		  setLEDState(LED_GREEN);
 8001172:	2002      	movs	r0, #2
 8001174:	f7ff fb78 	bl	8000868 <setLEDState>
		  current_zone = 2;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <main+0x630>)
 800117a:	2202      	movs	r2, #2
 800117c:	601a      	str	r2, [r3, #0]
		  pump_not_running = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
		  TIM2->CCR1 = 1900;
 8001182:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001186:	f240 726c 	movw	r2, #1900	@ 0x76c
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34
 800118c:	e05d      	b.n	800124a <main+0x67e>
	  } else if (clock_hours >= zone3_start && clock_hours <= zone3_stop) {
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <main+0x608>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <main+0x66c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	db50      	blt.n	8001240 <main+0x674>
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <main+0x608>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <main+0x670>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dc48      	bgt.n	8001240 <main+0x674>
		  setLEDState(LED_BLUE);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff fb5a 	bl	8000868 <setLEDState>
		  current_zone = 3;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <main+0x630>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	601a      	str	r2, [r3, #0]
		  pump_not_running = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
		  TIM2->CCR1 = 2500;
 80011be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c8:	e03f      	b.n	800124a <main+0x67e>
 80011ca:	bf00      	nop
 80011cc:	08007a40 	.word	0x08007a40
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200008c4 	.word	0x200008c4
 80011d8:	200008c5 	.word	0x200008c5
 80011dc:	200008c6 	.word	0x200008c6
 80011e0:	08007a50 	.word	0x08007a50
 80011e4:	20000880 	.word	0x20000880
 80011e8:	66666667 	.word	0x66666667
 80011ec:	200008bc 	.word	0x200008bc
 80011f0:	200008c0 	.word	0x200008c0
 80011f4:	08007aa4 	.word	0x08007aa4
 80011f8:	20000478 	.word	0x20000478
 80011fc:	200008b8 	.word	0x200008b8
 8001200:	200008b4 	.word	0x200008b4
 8001204:	08007af4 	.word	0x08007af4
 8001208:	20000228 	.word	0x20000228
 800120c:	200008c7 	.word	0x200008c7
 8001210:	200008c8 	.word	0x200008c8
 8001214:	200008ca 	.word	0x200008ca
 8001218:	200008cc 	.word	0x200008cc
 800121c:	8d3dcb09 	.word	0x8d3dcb09
 8001220:	20000894 	.word	0x20000894
 8001224:	20000898 	.word	0x20000898
 8001228:	2000089c 	.word	0x2000089c
 800122c:	200008a0 	.word	0x200008a0
 8001230:	200008a4 	.word	0x200008a4
 8001234:	200008a8 	.word	0x200008a8
 8001238:	200008ac 	.word	0x200008ac
 800123c:	200008b0 	.word	0x200008b0
	  } else {
		  // Pump is not to run
		  setLEDState(LED_OFF);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fb11 	bl	8000868 <setLEDState>
		  pump_not_running = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
	  }

	  // Manual control for PWM
	  if ((inlet_pwm == 0 && current_zone == 0) || (zone1_pwm == 0 && current_zone == 1) || (zone2_pwm == 0 && current_zone == 2) || (zone3_pwm == 0 && current_zone == 3)) {
 800124a:	4b73      	ldr	r3, [pc, #460]	@ (8001418 <main+0x84c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <main+0x68e>
 8001252:	4b72      	ldr	r3, [pc, #456]	@ (800141c <main+0x850>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d017      	beq.n	800128a <main+0x6be>
 800125a:	4b71      	ldr	r3, [pc, #452]	@ (8001420 <main+0x854>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <main+0x69e>
 8001262:	4b6e      	ldr	r3, [pc, #440]	@ (800141c <main+0x850>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00f      	beq.n	800128a <main+0x6be>
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <main+0x858>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <main+0x6ae>
 8001272:	4b6a      	ldr	r3, [pc, #424]	@ (800141c <main+0x850>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d007      	beq.n	800128a <main+0x6be>
 800127a:	4b6b      	ldr	r3, [pc, #428]	@ (8001428 <main+0x85c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d124      	bne.n	80012cc <main+0x700>
 8001282:	4b66      	ldr	r3, [pc, #408]	@ (800141c <main+0x850>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d120      	bne.n	80012cc <main+0x700>
		  // Read ADC
		  ADC_Select_CH(9);
 800128a:	2009      	movs	r0, #9
 800128c:	f7ff fb3e 	bl	800090c <ADC_Select_CH>
		  HAL_ADC_Start(&hadc1);
 8001290:	4866      	ldr	r0, [pc, #408]	@ (800142c <main+0x860>)
 8001292:	f001 f889 	bl	80023a8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800129a:	4864      	ldr	r0, [pc, #400]	@ (800142c <main+0x860>)
 800129c:	f001 f96b 	bl	8002576 <HAL_ADC_PollForConversion>
		  int ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 80012a0:	4862      	ldr	r0, [pc, #392]	@ (800142c <main+0x860>)
 80012a2:	f001 f9f3 	bl	800268c <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]
		  HAL_ADC_Stop(&hadc1);
 80012aa:	4860      	ldr	r0, [pc, #384]	@ (800142c <main+0x860>)
 80012ac:	f001 f930 	bl	8002510 <HAL_ADC_Stop>

		  current_motor_pwm = ADC_CH9 * 100 / 255;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2264      	movs	r2, #100	@ 0x64
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001430 <main+0x864>)
 80012ba:	fb82 1203 	smull	r1, r2, r2, r3
 80012be:	441a      	add	r2, r3
 80012c0:	11d2      	asrs	r2, r2, #7
 80012c2:	17db      	asrs	r3, r3, #31
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <main+0x868>)
 80012c8:	6013      	str	r3, [r2, #0]
	  if ((inlet_pwm == 0 && current_zone == 0) || (zone1_pwm == 0 && current_zone == 1) || (zone2_pwm == 0 && current_zone == 2) || (zone3_pwm == 0 && current_zone == 3)) {
 80012ca:	e022      	b.n	8001312 <main+0x746>
	  } else {
		  if (current_zone == 0) {
 80012cc:	4b53      	ldr	r3, [pc, #332]	@ (800141c <main+0x850>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d104      	bne.n	80012de <main+0x712>
			  current_motor_pwm = inlet_pwm;
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <main+0x84c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a56      	ldr	r2, [pc, #344]	@ (8001434 <main+0x868>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e019      	b.n	8001312 <main+0x746>
		  } else if (current_zone == 1) {
 80012de:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <main+0x850>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d104      	bne.n	80012f0 <main+0x724>
			  current_motor_pwm = zone1_pwm;
 80012e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001420 <main+0x854>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a52      	ldr	r2, [pc, #328]	@ (8001434 <main+0x868>)
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e010      	b.n	8001312 <main+0x746>
		  } else if (current_zone == 2) {
 80012f0:	4b4a      	ldr	r3, [pc, #296]	@ (800141c <main+0x850>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d104      	bne.n	8001302 <main+0x736>
			  current_motor_pwm = zone2_pwm;
 80012f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <main+0x858>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001434 <main+0x868>)
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e007      	b.n	8001312 <main+0x746>
		  } else if (current_zone == 3) {
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <main+0x850>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d103      	bne.n	8001312 <main+0x746>
			  current_motor_pwm = zone3_pwm;
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <main+0x85c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a49      	ldr	r2, [pc, #292]	@ (8001434 <main+0x868>)
 8001310:	6013      	str	r3, [r2, #0]
		  }
	  }
	  if (current_zone == 0 && !pump_not_running) {
 8001312:	4b42      	ldr	r3, [pc, #264]	@ (800141c <main+0x850>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d110      	bne.n	800133c <main+0x770>
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <main+0x770>
		  unsigned long speed = current_motor_pwm * 60000 / 100;
 8001320:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <main+0x868>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	60bb      	str	r3, [r7, #8]
		  TIM3->CCR1 = 0;
 800132e:	4b42      	ldr	r3, [pc, #264]	@ (8001438 <main+0x86c>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR3 = speed;
 8001334:	4a40      	ldr	r2, [pc, #256]	@ (8001438 <main+0x86c>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  if (current_zone == 0 && !pump_not_running) {
 800133a:	e01a      	b.n	8001372 <main+0x7a6>
	  } else if (current_zone != 0 && !pump_not_running) {
 800133c:	4b37      	ldr	r3, [pc, #220]	@ (800141c <main+0x850>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d010      	beq.n	8001366 <main+0x79a>
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <main+0x79a>
		  unsigned long speed = current_motor_pwm * 60000 / 100;
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <main+0x868>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	607b      	str	r3, [r7, #4]
		  TIM3->CCR1 = speed;
 8001358:	4a37      	ldr	r2, [pc, #220]	@ (8001438 <main+0x86c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6353      	str	r3, [r2, #52]	@ 0x34
		  TIM3->CCR3 = 0;
 800135e:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <main+0x86c>)
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
	  } else if (current_zone != 0 && !pump_not_running) {
 8001364:	e005      	b.n	8001372 <main+0x7a6>
	  } else {
		  TIM3->CCR1 = 0;
 8001366:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <main+0x86c>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR3 = 0;
 800136c:	4b32      	ldr	r3, [pc, #200]	@ (8001438 <main+0x86c>)
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }

	  HAL_Delay(200);
 8001372:	20c8      	movs	r0, #200	@ 0xc8
 8001374:	f000 ffb0 	bl	80022d8 <HAL_Delay>
	  if (clock_hours == 24) {
 8001378:	e5ff      	b.n	8000f7a <main+0x3ae>
		  break;
 800137a:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  if (empty) {
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03b      	beq.n	80013fa <main+0x82e>
	  // Resolve special case
	  print_terminal("\r\n\n RESERVOIR IS EMPTY\r\n");
 8001382:	482e      	ldr	r0, [pc, #184]	@ (800143c <main+0x870>)
 8001384:	f7ff fa04 	bl	8000790 <print_terminal>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	482c      	ldr	r0, [pc, #176]	@ (8001440 <main+0x874>)
 800138e:	f001 fee9 	bl	8003164 <HAL_GPIO_WritePin>

	  TIM3->CCR1 = 0;
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <main+0x86c>)
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR3 = 0;
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <main+0x86c>)
 800139a:	2200      	movs	r2, #0
 800139c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  while (1) {
		  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);  // RED
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a4:	4827      	ldr	r0, [pc, #156]	@ (8001444 <main+0x878>)
 80013a6:	f001 fedd 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_SET);  // GRN
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b0:	4824      	ldr	r0, [pc, #144]	@ (8001444 <main+0x878>)
 80013b2:	f001 fed7 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);  // BLU
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013bc:	4821      	ldr	r0, [pc, #132]	@ (8001444 <main+0x878>)
 80013be:	f001 fed1 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80013c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013c6:	f000 ff87 	bl	80022d8 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);  // RED
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d0:	481c      	ldr	r0, [pc, #112]	@ (8001444 <main+0x878>)
 80013d2:	f001 fec7 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GRN_Pin, GPIO_PIN_RESET);  // GRN
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013dc:	4819      	ldr	r0, [pc, #100]	@ (8001444 <main+0x878>)
 80013de:	f001 fec1 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);  // BLU
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e8:	4816      	ldr	r0, [pc, #88]	@ (8001444 <main+0x878>)
 80013ea:	f001 febb 	bl	8003164 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80013ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f2:	f000 ff71 	bl	80022d8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);  // RED
 80013f6:	bf00      	nop
 80013f8:	e7d1      	b.n	800139e <main+0x7d2>
	  }
  } else {
	  TIM3->CCR1 = 0;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <main+0x86c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR3 = 0;
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <main+0x86c>)
 8001402:	2200      	movs	r2, #0
 8001404:	63da      	str	r2, [r3, #60]	@ 0x3c
	  setLEDState(LED_OFF);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fa2e 	bl	8000868 <setLEDState>
 800140c:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 800140e:	4618      	mov	r0, r3
 8001410:	372c      	adds	r7, #44	@ 0x2c
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000884 	.word	0x20000884
 800141c:	200008b8 	.word	0x200008b8
 8001420:	20000888 	.word	0x20000888
 8001424:	2000088c 	.word	0x2000088c
 8001428:	20000890 	.word	0x20000890
 800142c:	20000078 	.word	0x20000078
 8001430:	80808081 	.word	0x80808081
 8001434:	200008b4 	.word	0x200008b4
 8001438:	40000400 	.word	0x40000400
 800143c:	08007b44 	.word	0x08007b44
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f004 ff84 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <SystemClock_Config+0xb8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <SystemClock_Config+0xb8>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <SystemClock_Config+0xb8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <SystemClock_Config+0xbc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <SystemClock_Config+0xbc>)
 8001496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <SystemClock_Config+0xbc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fe9d 	bl	80031fc <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014c8:	f000 fbe0 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 f900 	bl	80036ec <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014f2:	f000 fbcb 	bl	8001c8c <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	@ 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800151c:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <MX_ADC1_Init+0x9c>)
 800151e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001528:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800152c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001530:	2201      	movs	r2, #1
 8001532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800154a:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <MX_ADC1_Init+0xa0>)
 800154c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001556:	2201      	movs	r2, #1
 8001558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_ADC1_Init+0x98>)
 8001564:	2201      	movs	r2, #1
 8001566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800156a:	f000 fed9 	bl	8002320 <HAL_ADC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001574:	f000 fb8a 	bl	8001c8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001578:	2309      	movs	r3, #9
 800157a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001580:	2301      	movs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_ADC1_Init+0x98>)
 800158a:	f001 f88d 	bl	80026a8 <HAL_ADC_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001594:	f000 fb7a 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000078 	.word	0x20000078
 80015a4:	40012000 	.word	0x40012000
 80015a8:	0f000001 	.word	0x0f000001

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <MX_TIM2_Init+0xe8>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <MX_TIM2_Init+0xe8>)
 80015e6:	220f      	movs	r2, #15
 80015e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <MX_TIM2_Init+0xe8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <MX_TIM2_Init+0xe8>)
 80015f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <MX_TIM2_Init+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001604:	4823      	ldr	r0, [pc, #140]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001606:	f002 fa91 	bl	8003b2c <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001610:	f000 fb3c 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	4619      	mov	r1, r3
 8001620:	481c      	ldr	r0, [pc, #112]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001622:	f003 f85b 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800162c:	f000 fb2e 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001632:	f002 fb87 	bl	8003d44 <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800163c:	f000 fb26 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4619      	mov	r1, r3
 800164e:	4811      	ldr	r0, [pc, #68]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001650:	f003 fd64 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800165a:	f000 fb17 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	@ 0x60
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001662:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001666:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001678:	f002 ff6e 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001682:	f000 fb03 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001686:	4803      	ldr	r0, [pc, #12]	@ (8001694 <MX_TIM2_Init+0xe8>)
 8001688:	f000 fc0a 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	@ 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000c0 	.word	0x200000c0

08001698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	@ 0x38
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016ca:	4a34      	ldr	r2, [pc, #208]	@ (800179c <MX_TIM3_Init+0x104>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016d0:	220f      	movs	r2, #15
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016dc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80016e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ee:	482a      	ldr	r0, [pc, #168]	@ (8001798 <MX_TIM3_Init+0x100>)
 80016f0:	f002 fa1c 	bl	8003b2c <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016fa:	f000 fac7 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	4619      	mov	r1, r3
 800170a:	4823      	ldr	r0, [pc, #140]	@ (8001798 <MX_TIM3_Init+0x100>)
 800170c:	f002 ffe6 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001716:	f000 fab9 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800171a:	481f      	ldr	r0, [pc, #124]	@ (8001798 <MX_TIM3_Init+0x100>)
 800171c:	f002 fb12 	bl	8003d44 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001726:	f000 fab1 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	4619      	mov	r1, r3
 8001738:	4817      	ldr	r0, [pc, #92]	@ (8001798 <MX_TIM3_Init+0x100>)
 800173a:	f003 fcef 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001744:	f000 faa2 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 800174c:	f240 43af 	movw	r3, #1199	@ 0x4af
 8001750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM3_Init+0x100>)
 8001762:	f002 fef9 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800176c:	f000 fa8e 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2208      	movs	r2, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM3_Init+0x100>)
 800177c:	f002 feec 	bl	8004558 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001786:	f000 fa81 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178a:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM3_Init+0x100>)
 800178c:	f000 fb88 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	@ 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000108 	.word	0x20000108
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017be:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <MX_TIM5_Init+0x98>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 53;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017c4:	2235      	movs	r2, #53	@ 0x35
 80017c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017de:	2280      	movs	r2, #128	@ 0x80
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017e2:	4814      	ldr	r0, [pc, #80]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017e4:	f002 f9a2 	bl	8003b2c <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 fa4d 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <MX_TIM5_Init+0x94>)
 8001800:	f002 ff6c 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800180a:	f000 fa3f 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	@ (8001834 <MX_TIM5_Init+0x94>)
 800181c:	f003 fc7e 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001826:	f000 fa31 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000150 	.word	0x20000150
 8001838:	40000c00 	.word	0x40000c00

0800183c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001850:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <MX_TIM10_Init+0x8c>)
 8001852:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001856:	220f      	movs	r2, #15
 8001858:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM10_Init+0x88>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <MX_TIM10_Init+0x88>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001876:	f002 f959 	bl	8003b2c <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001880:	f000 fa04 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8001884:	480f      	ldr	r0, [pc, #60]	@ (80018c4 <MX_TIM10_Init+0x88>)
 8001886:	f002 fb67 	bl	8003f58 <HAL_TIM_IC_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001890:	f000 f9fc 	bl	8001c8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001894:	230a      	movs	r3, #10
 8001896:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <MX_TIM10_Init+0x88>)
 80018ac:	f002 fdb8 	bl	8004420 <HAL_TIM_IC_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 80018b6:	f000 f9e9 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000198 	.word	0x20000198
 80018c8:	40014400 	.word	0x40014400

080018cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_USART2_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_USART2_UART_Init+0x4c>)
 8001904:	f003 fc8c 	bl	8005220 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f000 f9bd 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001e0 	.word	0x200001e0
 800191c:	40004400 	.word	0x40004400

08001920 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <MX_USART6_UART_Init+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 800192c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001930:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_USART6_UART_Init+0x4c>)
 8001958:	f003 fc62 	bl	8005220 <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001962:	f000 f993 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000228 	.word	0x20000228
 8001970:	40011400 	.word	0x40011400

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b45      	ldr	r3, [pc, #276]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a44      	ldr	r2, [pc, #272]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b42      	ldr	r3, [pc, #264]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a36      	ldr	r2, [pc, #216]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <MX_GPIO_Init+0x14c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2120      	movs	r1, #32
 80019fe:	4831      	ldr	r0, [pc, #196]	@ (8001ac4 <MX_GPIO_Init+0x150>)
 8001a00:	f001 fbb0 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLU_Pin|RED_Pin|GRN_Pin|HCSR04_TRIG_Pin
 8001a04:	2200      	movs	r2, #0
 8001a06:	f243 61f0 	movw	r1, #14064	@ 0x36f0
 8001a0a:	482f      	ldr	r0, [pc, #188]	@ (8001ac8 <MX_GPIO_Init+0x154>)
 8001a0c:	f001 fbaa 	bl	8003164 <HAL_GPIO_WritePin>
                          |DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 51e4 	mov.w	r1, #7296	@ 0x1c80
 8001a16:	482d      	ldr	r0, [pc, #180]	@ (8001acc <MX_GPIO_Init+0x158>)
 8001a18:	f001 fba4 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4826      	ldr	r0, [pc, #152]	@ (8001acc <MX_GPIO_Init+0x158>)
 8001a32:	f001 f9fb 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a36:	2320      	movs	r3, #32
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481d      	ldr	r0, [pc, #116]	@ (8001ac4 <MX_GPIO_Init+0x150>)
 8001a4e:	f001 f9ed 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8001a52:	2304      	movs	r3, #4
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4818      	ldr	r0, [pc, #96]	@ (8001ac8 <MX_GPIO_Init+0x154>)
 8001a68:	f001 f9e0 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLU_Pin RED_Pin GRN_Pin HCSR04_TRIG_Pin
                           DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin DIGIT_A3_Pin */
  GPIO_InitStruct.Pin = BLU_Pin|RED_Pin|GRN_Pin|HCSR04_TRIG_Pin
 8001a6c:	f243 63f0 	movw	r3, #14064	@ 0x36f0
 8001a70:	617b      	str	r3, [r7, #20]
                          |DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <MX_GPIO_Init+0x154>)
 8001a86:	f001 f9d1 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B3_Pin DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin;
 8001a8a:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480a      	ldr	r0, [pc, #40]	@ (8001acc <MX_GPIO_Init+0x158>)
 8001aa4:	f001 f9c2 	bl	8002e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2008      	movs	r0, #8
 8001aae:	f001 f8f4 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ab2:	2008      	movs	r0, #8
 8001ab4:	f001 f90d 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800

08001ad0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	@ (8001b44 <HAL_UART_RxCpltCallback+0x74>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12b      	bne.n	8001b3a <HAL_UART_RxCpltCallback+0x6a>
	  {
	    if (rx_data == '\r') // ENTER key pressed
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_UART_RxCpltCallback+0x78>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b0d      	cmp	r3, #13
 8001ae8:	d112      	bne.n	8001b10 <HAL_UART_RxCpltCallback+0x40>
	    {
	      buffer[buffer_index] = '\0';
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_UART_RxCpltCallback+0x7c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <HAL_UART_RxCpltCallback+0x80>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	54d1      	strb	r1, [r2, r3]
	      rcv_intpt_flag = 1;
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_UART_RxCpltCallback+0x84>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
	      buffer_index = 0; // Reset buffer index for next input
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_UART_RxCpltCallback+0x7c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	      HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Echo newline
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	2202      	movs	r2, #2
 8001b06:	4914      	ldr	r1, [pc, #80]	@ (8001b58 <HAL_UART_RxCpltCallback+0x88>)
 8001b08:	4814      	ldr	r0, [pc, #80]	@ (8001b5c <HAL_UART_RxCpltCallback+0x8c>)
 8001b0a:	f003 fbd9 	bl	80052c0 <HAL_UART_Transmit>
 8001b0e:	e00f      	b.n	8001b30 <HAL_UART_RxCpltCallback+0x60>
	    }
	    else
	    {
	      buffer[buffer_index++] = rx_data;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_UART_RxCpltCallback+0x7c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <HAL_UART_RxCpltCallback+0x7c>)
 8001b18:	600a      	str	r2, [r1, #0]
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <HAL_UART_RxCpltCallback+0x78>)
 8001b1c:	7811      	ldrb	r1, [r2, #0]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_UART_RxCpltCallback+0x80>)
 8001b20:	54d1      	strb	r1, [r2, r3]
	      HAL_UART_Transmit(&huart6, &rx_data, 1, HAL_MAX_DELAY); // Echo the received character
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	2201      	movs	r2, #1
 8001b28:	4907      	ldr	r1, [pc, #28]	@ (8001b48 <HAL_UART_RxCpltCallback+0x78>)
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <HAL_UART_RxCpltCallback+0x8c>)
 8001b2c:	f003 fbc8 	bl	80052c0 <HAL_UART_Transmit>
	    }
	    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	4905      	ldr	r1, [pc, #20]	@ (8001b48 <HAL_UART_RxCpltCallback+0x78>)
 8001b34:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <HAL_UART_RxCpltCallback+0x8c>)
 8001b36:	f003 fc4e 	bl	80053d6 <HAL_UART_Receive_IT>
	  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40011400 	.word	0x40011400
 8001b48:	20000878 	.word	0x20000878
 8001b4c:	20000470 	.word	0x20000470
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000474 	.word	0x20000474
 8001b58:	08007b60 	.word	0x08007b60
 8001b5c:	20000228 	.word	0x20000228

08001b60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM5)) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12a      	bne.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0x68>
		wall_clock_hr_update_flag = 0;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		clock_secs += 1;
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b84:	701a      	strb	r2, [r3, #0]

		if ((clock_secs == 60)) {
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0x68>
			clock_mins += 1;
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b9c:	701a      	strb	r2, [r3, #0]
			clock_secs = 0;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

			if ((clock_mins == 60)) {
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b3c      	cmp	r3, #60	@ 0x3c
 8001bac:	d109      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x62>
				clock_hours += 1;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001bba:	701a      	strb	r2, [r3, #0]
				clock_mins = 0;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
			}
			wall_clock_hr_update_flag = 1;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	2000087c 	.word	0x2000087c
 8001bdc:	200008c6 	.word	0x200008c6
 8001be0:	200008c5 	.word	0x200008c5
 8001be4:	200008c4 	.word	0x200008c4

08001be8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d123      	bne.n	8001c42 <HAL_TIM_IC_CaptureCallback+0x5a>
		if (htim->Channel == 1) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7f1b      	ldrb	r3, [r3, #28]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d11f      	bne.n	8001c42 <HAL_TIM_IC_CaptureCallback+0x5a>
			if (first_edge == 0) {
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <HAL_TIM_IC_CaptureCallback+0x3c>
				time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f002 fe2c 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001c1a:	801a      	strh	r2, [r3, #0]
				first_edge = 1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
				hcsr04_Rx_flag = 1;
			}
		}
	}
}
 8001c22:	e00e      	b.n	8001c42 <HAL_TIM_IC_CaptureCallback+0x5a>
				time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c24:	2100      	movs	r1, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f002 fe20 	bl	800486c <HAL_TIM_ReadCapturedValue>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001c32:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24
				hcsr04_Rx_flag = 1;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40014400 	.word	0x40014400
 8001c50:	200008c8 	.word	0x200008c8
 8001c54:	200008ca 	.word	0x200008ca
 8001c58:	200008cc 	.word	0x200008cc
 8001c5c:	200008c7 	.word	0x200008c7

08001c60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RPM_TICK_Pin) {
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d104      	bne.n	8001c7a <HAL_GPIO_EXTI_Callback+0x1a>
		rpm_tick_count += 1;
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c78:	6013      	str	r3, [r2, #0]
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000880 	.word	0x20000880

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <Error_Handler+0x8>

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 ffd4 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_ADC_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d127      	bne.n	8001d5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d42:	2302      	movs	r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d46:	2303      	movs	r3, #3
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_ADC_MspInit+0x84>)
 8001d56:	f001 f869 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40012000 	.word	0x40012000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001dae:	e069      	b.n	8001e84 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a36      	ldr	r2, [pc, #216]	@ (8001e90 <HAL_TIM_Base_MspInit+0x120>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a32      	ldr	r2, [pc, #200]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
}
 8001dd6:	e055      	b.n	8001e84 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e94 <HAL_TIM_Base_MspInit+0x124>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d116      	bne.n	8001e10 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2032      	movs	r0, #50	@ 0x32
 8001e04:	f000 ff49 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e08:	2032      	movs	r0, #50	@ 0x32
 8001e0a:	f000 ff62 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8001e0e:	e039      	b.n	8001e84 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM10)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <HAL_TIM_Base_MspInit+0x128>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d134      	bne.n	8001e84 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	4a1a      	ldr	r2, [pc, #104]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_TIM_Base_MspInit+0x11c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <HAL_TIM_Base_MspInit+0x12c>)
 8001e70:	f000 ffdc 	bl	8002e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	2019      	movs	r0, #25
 8001e7a:	f000 ff0e 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f000 ff27 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	@ 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000c00 	.word	0x40000c00
 8001e98:	40014400 	.word	0x40014400
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec0:	d11e      	bne.n	8001f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4816      	ldr	r0, [pc, #88]	@ (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001efa:	f000 ff97 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001efe:	e023      	b.n	8001f48 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <HAL_TIM_MspPostInit+0xb8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d11e      	bne.n	8001f48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001f26:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <HAL_TIM_MspPostInit+0xbc>)
 8001f44:	f000 ff72 	bl	8002e2c <HAL_GPIO_Init>
}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40020800 	.word	0x40020800

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	@ 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <HAL_UART_MspInit+0xf8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	4b35      	ldr	r3, [pc, #212]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a34      	ldr	r2, [pc, #208]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b32      	ldr	r3, [pc, #200]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4822      	ldr	r0, [pc, #136]	@ (8002060 <HAL_UART_MspInit+0x100>)
 8001fd6:	f000 ff29 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fda:	e039      	b.n	8002050 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <HAL_UART_MspInit+0x104>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d134      	bne.n	8002050 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b19      	ldr	r3, [pc, #100]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_UART_MspInit+0xfc>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_UART_MspInit+0xfc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800201e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002030:	2308      	movs	r3, #8
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4809      	ldr	r0, [pc, #36]	@ (8002060 <HAL_UART_MspInit+0x100>)
 800203c:	f000 fef6 	bl	8002e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2047      	movs	r0, #71	@ 0x47
 8002046:	f000 fe28 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800204a:	2047      	movs	r0, #71	@ 0x47
 800204c:	f000 fe41 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3730      	adds	r7, #48	@ 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004400 	.word	0x40004400
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000
 8002064:	40011400 	.word	0x40011400

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <NMI_Handler+0x4>

08002070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <MemManage_Handler+0x4>

08002080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <UsageFault_Handler+0x4>

08002090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020be:	f000 f8eb 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80020ca:	2004      	movs	r0, #4
 80020cc:	f001 f87e 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020da:	f002 f8b1 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000198 	.word	0x20000198

080020e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <TIM5_IRQHandler+0x10>)
 80020ee:	f002 f8a7 	bl	8004240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000150 	.word	0x20000150

080020fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <USART6_IRQHandler+0x10>)
 8002102:	f003 f98d 	bl	8005420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000228 	.word	0x20000228

08002110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <_sbrk+0x5c>)
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <_sbrk+0x60>)
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <_sbrk+0x64>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <_sbrk+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d207      	bcs.n	8002150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002140:	f004 f918 	bl	8006374 <__errno>
 8002144:	4603      	mov	r3, r0
 8002146:	220c      	movs	r2, #12
 8002148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e009      	b.n	8002164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <_sbrk+0x64>)
 8002160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20018000 	.word	0x20018000
 8002170:	00000400 	.word	0x00000400
 8002174:	200008d0 	.word	0x200008d0
 8002178:	20000a20 	.word	0x20000a20

0800217c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <SystemInit+0x20>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <SystemInit+0x20>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021a4:	f7ff ffea 	bl	800217c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	@ (80021ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f004 f8d7 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7fe fcfb 	bl	8000bcc <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021e4:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 80021e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80021ec:	20000a20 	.word	0x20000a20

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 fd31 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff fd36 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fd49 	bl	8002cee <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 fd11 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	200008d4 	.word	0x200008d4

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200008d4 	.word	0x200008d4

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000008 	.word	0x20000008

08002320 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e033      	b.n	800239e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fcd2 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002366:	f023 0302 	bic.w	r3, r3, #2
 800236a:	f043 0202 	orr.w	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 faba 	bl	80028ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
 800238e:	e001      	b.n	8002394 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Start+0x1a>
 80023be:	2302      	movs	r3, #2
 80023c0:	e097      	b.n	80024f2 <HAL_ADC_Start+0x14a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d018      	beq.n	800240a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e8:	4b45      	ldr	r3, [pc, #276]	@ (8002500 <HAL_ADC_Start+0x158>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a45      	ldr	r2, [pc, #276]	@ (8002504 <HAL_ADC_Start+0x15c>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9a      	lsrs	r2, r3, #18
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d15f      	bne.n	80024d8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002442:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002456:	d106      	bne.n	8002466 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	f023 0206 	bic.w	r2, r3, #6
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
 8002464:	e002      	b.n	800246c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_ADC_Start+0x160>)
 8002476:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002480:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d129      	bne.n	80024f0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	e020      	b.n	80024f0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a16      	ldr	r2, [pc, #88]	@ (800250c <HAL_ADC_Start+0x164>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d11b      	bne.n	80024f0 <HAL_ADC_Start+0x148>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	e00b      	b.n	80024f0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f043 0210 	orr.w	r2, r3, #16
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000
 8002504:	431bde83 	.word	0x431bde83
 8002508:	40012300 	.word	0x40012300
 800250c:	40012000 	.word	0x40012000

08002510 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Stop+0x16>
 8002522:	2302      	movs	r3, #2
 8002524:	e021      	b.n	800256a <HAL_ADC_Stop+0x5a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002592:	d113      	bne.n	80025bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800259e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a2:	d10b      	bne.n	80025bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e063      	b.n	8002684 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7ff fe80 	bl	80022c0 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025c2:	e021      	b.n	8002608 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d01d      	beq.n	8002608 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_ADC_PollForConversion+0x6c>
 80025d2:	f7ff fe75 	bl	80022c0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d212      	bcs.n	8002608 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d00b      	beq.n	8002608 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e03d      	b.n	8002684 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d1d6      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f06f 0212 	mvn.w	r2, #18
 800261e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d123      	bne.n	8002682 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11f      	bne.n	8002682 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d111      	bne.n	8002682 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e105      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x228>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d925      	bls.n	8002720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68d9      	ldr	r1, [r3, #12]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43da      	mvns	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	400a      	ands	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	4603      	mov	r3, r0
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4403      	add	r3, r0
 8002712:	3b1e      	subs	r3, #30
 8002714:	409a      	lsls	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e022      	b.n	8002766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	2207      	movs	r2, #7
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	4603      	mov	r3, r0
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4403      	add	r3, r0
 800275c:	409a      	lsls	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d824      	bhi.n	80027b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b05      	subs	r3, #5
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b05      	subs	r3, #5
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027b6:	e04c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d824      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b23      	subs	r3, #35	@ 0x23
 80027d2:	221f      	movs	r2, #31
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b23      	subs	r3, #35	@ 0x23
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
 8002808:	e023      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b41      	subs	r3, #65	@ 0x41
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b41      	subs	r3, #65	@ 0x41
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002852:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_ADC_ConfigChannel+0x234>)
 8002854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <HAL_ADC_ConfigChannel+0x238>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d109      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1cc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d105      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	@ (80028e0 <HAL_ADC_ConfigChannel+0x238>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d123      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x21e>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b10      	cmp	r3, #16
 8002884:	d003      	beq.n	800288e <HAL_ADC_ConfigChannel+0x1e6>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b11      	cmp	r3, #17
 800288c:	d11b      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_ADC_ConfigChannel+0x23c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_ADC_ConfigChannel+0x240>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	0c9a      	lsrs	r2, r3, #18
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40012300 	.word	0x40012300
 80028e0:	40012000 	.word	0x40012000
 80028e4:	20000000 	.word	0x20000000
 80028e8:	431bde83 	.word	0x431bde83

080028ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f4:	4b79      	ldr	r3, [pc, #484]	@ (8002adc <ADC_Init+0x1f0>)
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	021a      	lsls	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	4a58      	ldr	r2, [pc, #352]	@ (8002ae0 <ADC_Init+0x1f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e00f      	b.n	80029ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0202 	bic.w	r2, r2, #2
 80029f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7e1b      	ldrb	r3, [r3, #24]
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	3b01      	subs	r3, #1
 8002a44:	035a      	lsls	r2, r3, #13
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e007      	b.n	8002a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	051a      	lsls	r2, r3, #20
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aa2:	025a      	lsls	r2, r3, #9
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	029a      	lsls	r2, r3, #10
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40012300 	.word	0x40012300
 8002ae0:	0f000001 	.word	0x0f000001

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	@ (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	@ (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f7ff ff8e 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff29 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff3e 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff8e 	bl	8002bd8 <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5d 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff31 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa2 	bl	8002c40 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff fad4 	bl	80022c0 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d008      	beq.n	8002d38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e052      	b.n	8002dde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0216 	bic.w	r2, r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <HAL_DMA_Abort+0x62>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0208 	bic.w	r2, r2, #8
 8002d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d88:	e013      	b.n	8002db2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8a:	f7ff fa99 	bl	80022c0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d90c      	bls.n	8002db2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e015      	b.n	8002dde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e4      	bne.n	8002d8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	223f      	movs	r2, #63	@ 0x3f
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00c      	b.n	8002e1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2205      	movs	r2, #5
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e159      	b.n	80030fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8148 	bne.w	80030f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a2 	beq.w	80030f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b57      	ldr	r3, [pc, #348]	@ (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4a56      	ldr	r2, [pc, #344]	@ (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_GPIO_Init+0x2ec>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a49      	ldr	r2, [pc, #292]	@ (800311c <HAL_GPIO_Init+0x2f0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x202>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	@ (8003120 <HAL_GPIO_Init+0x2f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x1fe>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a47      	ldr	r2, [pc, #284]	@ (8003124 <HAL_GPIO_Init+0x2f8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x1fa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a46      	ldr	r2, [pc, #280]	@ (8003128 <HAL_GPIO_Init+0x2fc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x1f6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a45      	ldr	r2, [pc, #276]	@ (800312c <HAL_GPIO_Init+0x300>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x1f2>
 800301a:	2304      	movs	r3, #4
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800301e:	2307      	movs	r3, #7
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x204>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x204>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800302e:	2300      	movs	r3, #0
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	@ (8003118 <HAL_GPIO_Init+0x2ec>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_GPIO_Init+0x304>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <HAL_GPIO_Init+0x304>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b2d      	ldr	r3, [pc, #180]	@ (8003130 <HAL_GPIO_Init+0x304>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a24      	ldr	r2, [pc, #144]	@ (8003130 <HAL_GPIO_Init+0x304>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_GPIO_Init+0x304>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_GPIO_Init+0x304>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030cc:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_GPIO_Init+0x304>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003130 <HAL_GPIO_Init+0x304>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f aea2 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	@ 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40013800 	.word	0x40013800
 800311c:	40020000 	.word	0x40020000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020800 	.word	0x40020800
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021000 	.word	0x40021000
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e001      	b.n	8003156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003180:	e003      	b.n	800318a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a8:	887a      	ldrh	r2, [r7, #2]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	041a      	lsls	r2, r3, #16
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43d9      	mvns	r1, r3
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	400b      	ands	r3, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	619a      	str	r2, [r3, #24]
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e2:	4a05      	ldr	r2, [pc, #20]	@ (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fd38 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e267      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d075      	beq.n	8003306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800321a:	4b88      	ldr	r3, [pc, #544]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00c      	beq.n	8003240 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003226:	4b85      	ldr	r3, [pc, #532]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800322e:	2b08      	cmp	r3, #8
 8003230:	d112      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b82      	ldr	r3, [pc, #520]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323e:	d10b      	bne.n	8003258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	4b7e      	ldr	r3, [pc, #504]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d05b      	beq.n	8003304 <HAL_RCC_OscConfig+0x108>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d157      	bne.n	8003304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e242      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x74>
 8003262:	4b76      	ldr	r3, [pc, #472]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b70      	ldr	r3, [pc, #448]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6f      	ldr	r2, [pc, #444]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6d      	ldr	r3, [pc, #436]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6c      	ldr	r2, [pc, #432]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xb0>
 8003294:	4b69      	ldr	r3, [pc, #420]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b66      	ldr	r3, [pc, #408]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a65      	ldr	r2, [pc, #404]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7ff f804 	bl	80022c0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7ff f800 	bl	80022c0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e207      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xc0>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fff0 	bl	80022c0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe ffec 	bl	80022c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	@ 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e1f3      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	4b51      	ldr	r3, [pc, #324]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0xe8>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003312:	4b4a      	ldr	r3, [pc, #296]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003326:	2b08      	cmp	r3, #8
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b44      	ldr	r3, [pc, #272]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1c7      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4937      	ldr	r1, [pc, #220]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0x244>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe ffa5 	bl	80022c0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe ffa1 	bl	80022c0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1a8      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b28      	ldr	r3, [pc, #160]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4925      	ldr	r1, [pc, #148]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <HAL_RCC_OscConfig+0x244>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe ff84 	bl	80022c0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe ff80 	bl	80022c0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e187      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <HAL_RCC_OscConfig+0x248>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe ff64 	bl	80022c0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe ff60 	bl	80022c0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e167      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_RCC_OscConfig+0x240>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x200>
 800341a:	e01b      	b.n	8003454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_RCC_OscConfig+0x248>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe ff4d 	bl	80022c0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	e00e      	b.n	8003448 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe ff49 	bl	80022c0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d907      	bls.n	8003448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e150      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ea      	bne.n	800342a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b81      	ldr	r3, [pc, #516]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b7d      	ldr	r3, [pc, #500]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	4a7c      	ldr	r2, [pc, #496]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
 8003482:	4b7a      	ldr	r3, [pc, #488]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b77      	ldr	r3, [pc, #476]	@ (8003670 <HAL_RCC_OscConfig+0x474>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b74      	ldr	r3, [pc, #464]	@ (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a73      	ldr	r2, [pc, #460]	@ (8003670 <HAL_RCC_OscConfig+0x474>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe ff09 	bl	80022c0 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe ff05 	bl	80022c0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e10c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003670 <HAL_RCC_OscConfig+0x474>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2ea>
 80034d8:	4b64      	ldr	r3, [pc, #400]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	4a63      	ldr	r2, [pc, #396]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x30c>
 80034ee:	4b5f      	ldr	r3, [pc, #380]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a5e      	ldr	r2, [pc, #376]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fa:	4b5c      	ldr	r3, [pc, #368]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	4a5b      	ldr	r2, [pc, #364]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	@ 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x324>
 8003508:	4b58      	ldr	r3, [pc, #352]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a57      	ldr	r2, [pc, #348]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	4b55      	ldr	r3, [pc, #340]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	4a54      	ldr	r2, [pc, #336]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe feca 	bl	80022c0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe fec6 	bl	80022c0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0cb      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b49      	ldr	r3, [pc, #292]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x334>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fe feb4 	bl	80022c0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe feb0 	bl	80022c0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0b5      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b3e      	ldr	r3, [pc, #248]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	4a38      	ldr	r2, [pc, #224]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a1 	beq.w	80036dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359a:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d05c      	beq.n	8003660 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d141      	bne.n	8003632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b31      	ldr	r3, [pc, #196]	@ (8003674 <HAL_RCC_OscConfig+0x478>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe fe84 	bl	80022c0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe fe80 	bl	80022c0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e087      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b27      	ldr	r3, [pc, #156]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	491b      	ldr	r1, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x478>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fe59 	bl	80022c0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fe55 	bl	80022c0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e05c      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x416>
 8003630:	e054      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <HAL_RCC_OscConfig+0x478>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fe42 	bl	80022c0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fe3e 	bl	80022c0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e045      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_RCC_OscConfig+0x470>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x444>
 800365e:	e03d      	b.n	80036dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e038      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	40007000 	.word	0x40007000
 8003674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_RCC_OscConfig+0x4ec>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d028      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d121      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11a      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fd70 	bl	80022c0 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fd6c 	bl	80022c0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f821 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fcd0 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08007b70 	.word	0x08007b70
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b094      	sub	sp, #80	@ 0x50
 80038be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d0:	4b79      	ldr	r3, [pc, #484]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d00d      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x40>
 80038dc:	2b08      	cmp	r3, #8
 80038de:	f200 80e1 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ea:	e0db      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b73      	ldr	r3, [pc, #460]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f0:	e0db      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f2:	4b73      	ldr	r3, [pc, #460]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f6:	e0d8      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f8:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003900:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003902:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003918:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
 8003926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4621      	mov	r1, r4
 8003944:	1a51      	subs	r1, r2, r1
 8003946:	6139      	str	r1, [r7, #16]
 8003948:	4629      	mov	r1, r5
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800395c:	4659      	mov	r1, fp
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	4651      	mov	r1, sl
 8003962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003966:	4651      	mov	r1, sl
 8003968:	018a      	lsls	r2, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ebb2 0801 	subs.w	r8, r2, r1
 8003970:	4659      	mov	r1, fp
 8003972:	eb63 0901 	sbc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	462b      	mov	r3, r5
 8003998:	eb49 0303 	adc.w	r3, r9, r3
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039aa:	4629      	mov	r1, r5
 80039ac:	024b      	lsls	r3, r1, #9
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b4:	4621      	mov	r1, r4
 80039b6:	024a      	lsls	r2, r1, #9
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039c8:	f7fc fc62 	bl	8000290 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d4:	e058      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b38      	ldr	r3, [pc, #224]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	4611      	mov	r1, r2
 80039e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	f04f 0000 	mov.w	r0, #0
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a02:	0150      	lsls	r0, r2, #5
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a28:	ebb2 040a 	subs.w	r4, r2, sl
 8003a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	00eb      	lsls	r3, r5, #3
 8003a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3e:	00e2      	lsls	r2, r4, #3
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	18e3      	adds	r3, r4, r3
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	61fa      	str	r2, [r7, #28]
 8003a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7c:	f7fc fc08 	bl	8000290 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3750      	adds	r7, #80	@ 0x50
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff0 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	@ (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08007b80 	.word	0x08007b80

08003b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b08:	f7ff ffdc 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0b5b      	lsrs	r3, r3, #13
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	@ (8003b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08007b80 	.word	0x08007b80

08003b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e041      	b.n	8003bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe f90c 	bl	8001d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f000 fee0 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d001      	beq.n	8003be4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e03c      	b.n	8003c5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c6c <HAL_TIM_Base_Start+0xa0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_Base_Start+0x5c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_Base_Start+0x5c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_TIM_Base_Start+0xa4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_Base_Start+0x5c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <HAL_TIM_Base_Start+0xa8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_Base_Start+0x5c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_TIM_Base_Start+0xac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_Base_Start+0x5c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_TIM_Base_Start+0xb0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d111      	bne.n	8003c4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d010      	beq.n	8003c5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	e007      	b.n	8003c5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40014000 	.word	0x40014000

08003c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e044      	b.n	8003d22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x6c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc2:	d013      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x6c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x6c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a19      	ldr	r2, [pc, #100]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x6c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xbc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x6c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e041      	b.n	8003dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f839 	bl	8003de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 fdd4 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_TIM_PWM_Start+0x24>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e022      	b.n	8003e62 <HAL_TIM_PWM_Start+0x6a>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d109      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x3e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e015      	b.n	8003e62 <HAL_TIM_PWM_Start+0x6a>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d109      	bne.n	8003e50 <HAL_TIM_PWM_Start+0x58>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e008      	b.n	8003e62 <HAL_TIM_PWM_Start+0x6a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e068      	b.n	8003f3c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0x82>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e78:	e013      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xaa>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x92>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xaa>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xa2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e98:	e003      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	6839      	ldr	r1, [r7, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f910 	bl	80050d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <HAL_TIM_PWM_Start+0x14c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_TIM_PWM_Start+0x14c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x10e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d013      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x10e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <HAL_TIM_PWM_Start+0x150>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x10e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a17      	ldr	r2, [pc, #92]	@ (8003f4c <HAL_TIM_PWM_Start+0x154>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x10e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <HAL_TIM_PWM_Start+0x158>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x10e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <HAL_TIM_PWM_Start+0x15c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d111      	bne.n	8003f2a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d010      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	e007      	b.n	8003f3a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000

08003f58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e041      	b.n	8003fee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f839 	bl	8003ff6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 fcca 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_TIM_IC_Start_IT+0x1e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e013      	b.n	8004052 <HAL_TIM_IC_Start_IT+0x46>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d104      	bne.n	800403a <HAL_TIM_IC_Start_IT+0x2e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e00b      	b.n	8004052 <HAL_TIM_IC_Start_IT+0x46>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d104      	bne.n	800404a <HAL_TIM_IC_Start_IT+0x3e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e003      	b.n	8004052 <HAL_TIM_IC_Start_IT+0x46>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_TIM_IC_Start_IT+0x58>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e013      	b.n	800408c <HAL_TIM_IC_Start_IT+0x80>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d104      	bne.n	8004074 <HAL_TIM_IC_Start_IT+0x68>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e00b      	b.n	800408c <HAL_TIM_IC_Start_IT+0x80>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b08      	cmp	r3, #8
 8004078:	d104      	bne.n	8004084 <HAL_TIM_IC_Start_IT+0x78>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e003      	b.n	800408c <HAL_TIM_IC_Start_IT+0x80>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408a:	b2db      	uxtb	r3, r3
 800408c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800408e:	7bbb      	ldrb	r3, [r7, #14]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004094:	7b7b      	ldrb	r3, [r7, #13]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0c2      	b.n	8004224 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_IC_Start_IT+0xa2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ac:	e013      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0xca>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d104      	bne.n	80040be <HAL_TIM_IC_Start_IT+0xb2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040bc:	e00b      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0xca>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_IC_Start_IT+0xc2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040cc:	e003      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0xca>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_IC_Start_IT+0xda>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e4:	e013      	b.n	800410e <HAL_TIM_IC_Start_IT+0x102>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IC_Start_IT+0xea>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040f4:	e00b      	b.n	800410e <HAL_TIM_IC_Start_IT+0x102>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_IC_Start_IT+0xfa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004104:	e003      	b.n	800410e <HAL_TIM_IC_Start_IT+0x102>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d841      	bhi.n	8004198 <HAL_TIM_IC_Start_IT+0x18c>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <HAL_TIM_IC_Start_IT+0x110>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004151 	.word	0x08004151
 8004120:	08004199 	.word	0x08004199
 8004124:	08004199 	.word	0x08004199
 8004128:	08004199 	.word	0x08004199
 800412c:	08004163 	.word	0x08004163
 8004130:	08004199 	.word	0x08004199
 8004134:	08004199 	.word	0x08004199
 8004138:	08004199 	.word	0x08004199
 800413c:	08004175 	.word	0x08004175
 8004140:	08004199 	.word	0x08004199
 8004144:	08004199 	.word	0x08004199
 8004148:	08004199 	.word	0x08004199
 800414c:	08004187 	.word	0x08004187
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0202 	orr.w	r2, r2, #2
 800415e:	60da      	str	r2, [r3, #12]
      break;
 8004160:	e01d      	b.n	800419e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0204 	orr.w	r2, r2, #4
 8004170:	60da      	str	r2, [r3, #12]
      break;
 8004172:	e014      	b.n	800419e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	60da      	str	r2, [r3, #12]
      break;
 8004184:	e00b      	b.n	800419e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0210 	orr.w	r2, r2, #16
 8004194:	60da      	str	r2, [r3, #12]
      break;
 8004196:	e002      	b.n	800419e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	bf00      	nop
  }

  if (status == HAL_OK)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d13e      	bne.n	8004222 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 ff8f 	bl	80050d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	@ (800422c <HAL_TIM_IC_Start_IT+0x220>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIM_IC_Start_IT+0x1e2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d013      	beq.n	80041ee <HAL_TIM_IC_Start_IT+0x1e2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a19      	ldr	r2, [pc, #100]	@ (8004230 <HAL_TIM_IC_Start_IT+0x224>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIM_IC_Start_IT+0x1e2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a17      	ldr	r2, [pc, #92]	@ (8004234 <HAL_TIM_IC_Start_IT+0x228>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIM_IC_Start_IT+0x1e2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_TIM_IC_Start_IT+0x22c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_IC_Start_IT+0x1e2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a14      	ldr	r2, [pc, #80]	@ (800423c <HAL_TIM_IC_Start_IT+0x230>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d111      	bne.n	8004212 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d010      	beq.n	8004222 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	e007      	b.n	8004222 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40014000 	.word	0x40014000

08004240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0202 	mvn.w	r2, #2
 8004274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fcac 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb2e 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb35 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0204 	mvn.w	r2, #4
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd fc86 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb08 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb0f 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0208 	mvn.w	r2, #8
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fc60 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fae2 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fae9 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2208      	movs	r2, #8
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd fc3a 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fabc 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fac3 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fbda 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 ff1e 	bl	800520c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa94 	bl	800491c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0220 	mvn.w	r2, #32
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fef0 	bl	80051f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_TIM_IC_ConfigChannel+0x1e>
 800443a:	2302      	movs	r3, #2
 800443c:	e088      	b.n	8004550 <HAL_TIM_IC_ConfigChannel+0x130>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800445c:	f000 fc80 	bl	8004d60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 020c 	bic.w	r2, r2, #12
 800446e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6999      	ldr	r1, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	619a      	str	r2, [r3, #24]
 8004482:	e060      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d11c      	bne.n	80044c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800449a:	f000 fcf8 	bl	8004e8e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6999      	ldr	r1, [r3, #24]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	e040      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11b      	bne.n	8004502 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80044da:	f000 fd45 	bl	8004f68 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 020c 	bic.w	r2, r2, #12
 80044ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
 8004500:	e021      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b0c      	cmp	r3, #12
 8004506:	d11c      	bne.n	8004542 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004518:	f000 fd62 	bl	8004fe0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800452a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69d9      	ldr	r1, [r3, #28]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	61da      	str	r2, [r3, #28]
 8004540:	e001      	b.n	8004546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004572:	2302      	movs	r3, #2
 8004574:	e0ae      	b.n	80046d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	f200 809f 	bhi.w	80046c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080046c5 	.word	0x080046c5
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	08004601 	.word	0x08004601
 80045a0:	080046c5 	.word	0x080046c5
 80045a4:	080046c5 	.word	0x080046c5
 80045a8:	080046c5 	.word	0x080046c5
 80045ac:	08004643 	.word	0x08004643
 80045b0:	080046c5 	.word	0x080046c5
 80045b4:	080046c5 	.word	0x080046c5
 80045b8:	080046c5 	.word	0x080046c5
 80045bc:	08004683 	.word	0x08004683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fa3e 	bl	8004a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0204 	bic.w	r2, r2, #4
 80045ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      break;
 80045fe:	e064      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fa84 	bl	8004b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6999      	ldr	r1, [r3, #24]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
      break;
 8004640:	e043      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 facf 	bl	8004bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0208 	orr.w	r2, r2, #8
 800465c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0204 	bic.w	r2, r2, #4
 800466c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69d9      	ldr	r1, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	61da      	str	r2, [r3, #28]
      break;
 8004680:	e023      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fb19 	bl	8004cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800469c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69d9      	ldr	r1, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
      break;
 80046c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x1c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0b4      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x186>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800471e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004730:	d03e      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004736:	f200 8087 	bhi.w	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	f000 8086 	beq.w	800484e <HAL_TIM_ConfigClockSource+0x172>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004746:	d87f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b70      	cmp	r3, #112	@ 0x70
 800474a:	d01a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xa6>
 800474c:	2b70      	cmp	r3, #112	@ 0x70
 800474e:	d87b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b60      	cmp	r3, #96	@ 0x60
 8004752:	d050      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d877      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b50      	cmp	r3, #80	@ 0x50
 800475a:	d03c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xfa>
 800475c:	2b50      	cmp	r3, #80	@ 0x50
 800475e:	d873      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d058      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x13a>
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	d86f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b30      	cmp	r3, #48	@ 0x30
 800476a:	d064      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b30      	cmp	r3, #48	@ 0x30
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b20      	cmp	r3, #32
 8004776:	d867      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05c      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d05a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	e062      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	f000 fc7d 	bl	8005090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
      break;
 80047ae:	e04f      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	f000 fc66 	bl	8005090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fb24 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	@ 0x50
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fc33 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fb80 	bl	8004f08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	@ 0x60
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc23 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004814:	e01c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fb04 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	@ 0x40
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fc13 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004834:	e00c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fc0a 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004846:	e003      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e000      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d831      	bhi.n	80048e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048e5 	.word	0x080048e5
 8004894:	080048e5 	.word	0x080048e5
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048e5 	.word	0x080048e5
 80048a0:	080048e5 	.word	0x080048e5
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048e5 	.word	0x080048e5
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048db 	.word	0x080048db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	60fb      	str	r3, [r7, #12]

      break;
 80048c4:	e00f      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	60fb      	str	r3, [r7, #12]

      break;
 80048ce:	e00a      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	60fb      	str	r3, [r7, #12]

      break;
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	60fb      	str	r3, [r7, #12]

      break;
 80048e2:	e000      	b.n	80048e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048e4:	bf00      	nop
  }

  return tmpreg;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3a      	ldr	r2, [pc, #232]	@ (8004a2c <TIM_Base_SetConfig+0xfc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a37      	ldr	r2, [pc, #220]	@ (8004a30 <TIM_Base_SetConfig+0x100>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a36      	ldr	r2, [pc, #216]	@ (8004a34 <TIM_Base_SetConfig+0x104>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a35      	ldr	r2, [pc, #212]	@ (8004a38 <TIM_Base_SetConfig+0x108>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a2c <TIM_Base_SetConfig+0xfc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01b      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d017      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a28      	ldr	r2, [pc, #160]	@ (8004a30 <TIM_Base_SetConfig+0x100>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a27      	ldr	r2, [pc, #156]	@ (8004a34 <TIM_Base_SetConfig+0x104>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <TIM_Base_SetConfig+0x108>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a25      	ldr	r2, [pc, #148]	@ (8004a3c <TIM_Base_SetConfig+0x10c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a24      	ldr	r2, [pc, #144]	@ (8004a40 <TIM_Base_SetConfig+0x110>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a23      	ldr	r2, [pc, #140]	@ (8004a44 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	@ (8004a2c <TIM_Base_SetConfig+0xfc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f023 0201 	bic.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0201 	bic.w	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0302 	bic.w	r3, r3, #2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b10 <TIM_OC1_SetConfig+0xc8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10c      	bne.n	8004abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0308 	bic.w	r3, r3, #8
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 0304 	bic.w	r3, r3, #4
 8004abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <TIM_OC1_SetConfig+0xc8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d111      	bne.n	8004aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40010000 	.word	0x40010000

08004b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f023 0210 	bic.w	r2, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0320 	bic.w	r3, r3, #32
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004be8 <TIM_OC2_SetConfig+0xd4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a15      	ldr	r2, [pc, #84]	@ (8004be8 <TIM_OC2_SetConfig+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d113      	bne.n	8004bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000

08004bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	@ (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10d      	bne.n	8004c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	@ (8004d5c <TIM_OC4_SetConfig+0x9c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d109      	bne.n	8004d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000

08004d60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f023 0201 	bic.w	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a24      	ldr	r2, [pc, #144]	@ (8004e1c <TIM_TI1_SetConfig+0xbc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d94:	d00f      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a21      	ldr	r2, [pc, #132]	@ (8004e20 <TIM_TI1_SetConfig+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a20      	ldr	r2, [pc, #128]	@ (8004e24 <TIM_TI1_SetConfig+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d007      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <TIM_TI1_SetConfig+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <TIM_TI1_SetConfig+0xcc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <TIM_TI1_SetConfig+0x5a>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <TIM_TI1_SetConfig+0x5c>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e003      	b.n	8004dda <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f023 030a 	bic.w	r3, r3, #10
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 030a 	and.w	r3, r3, #10
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40014000 	.word	0x40014000

08004e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 030a 	bic.w	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0210 	bic.w	r2, r3, #16
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	031b      	lsls	r3, r3, #12
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800500c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	b29b      	uxth	r3, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005032:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	031b      	lsls	r3, r3, #12
 8005038:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	f043 0307 	orr.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2201      	movs	r2, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	401a      	ands	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e050      	b.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	@ (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d013      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a18      	ldr	r2, [pc, #96]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000

080051f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e042      	b.n	80052b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fe8a 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	@ 0x24
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fdbd 	bl	8005de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	@ 0x28
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d175      	bne.n	80053cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x2c>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e06e      	b.n	80053ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	@ 0x21
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fc ffdf 	bl	80022c0 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005318:	d108      	bne.n	800532c <HAL_UART_Transmit+0x6c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e003      	b.n	8005334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005334:	e02e      	b.n	8005394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	@ 0x80
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fb1f 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e03a      	b.n	80053ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3302      	adds	r3, #2
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	e007      	b.n	8005386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1cb      	bne.n	8005336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2140      	movs	r1, #64	@ 0x40
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 faeb 	bl	8005984 <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e006      	b.n	80053ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d112      	bne.n	8005416 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Receive_IT+0x26>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00b      	b.n	8005418 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb12 	bl	8005a36 <UART_Start_Receive_IT>
 8005412:	4603      	mov	r3, r0
 8005414:	e000      	b.n	8005418 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b0ba      	sub	sp, #232	@ 0xe8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800545e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_UART_IRQHandler+0x66>
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fbf2 	bl	8005c68 <UART_Receive_IT>
      return;
 8005484:	e25b      	b.n	800593e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80de 	beq.w	800564c <HAL_UART_IRQHandler+0x22c>
 8005490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80d1 	beq.w	800564c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xae>
 80054b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_UART_IRQHandler+0xd2>
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0202 	orr.w	r2, r3, #2
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_UART_IRQHandler+0xf6>
 80054fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	f043 0204 	orr.w	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <HAL_UART_IRQHandler+0x126>
 8005522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800552e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	f043 0208 	orr.w	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 81f2 	beq.w	8005934 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_UART_IRQHandler+0x14e>
 800555c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb7d 	bl	8005c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005578:	2b40      	cmp	r3, #64	@ 0x40
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_UART_IRQHandler+0x17a>
 8005592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04f      	beq.n	800563a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa85 	bl	8005aaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d141      	bne.n	8005632 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1d9      	bne.n	80055ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d013      	beq.n	800562a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	4a7e      	ldr	r2, [pc, #504]	@ (8005800 <HAL_UART_IRQHandler+0x3e0>)
 8005608:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd fbe9 	bl	8002de6 <HAL_DMA_Abort_IT>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e00e      	b.n	8005648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f994 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00a      	b.n	8005648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f990 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e006      	b.n	8005648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f98c 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005646:	e175      	b.n	8005934 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	bf00      	nop
    return;
 800564a:	e173      	b.n	8005934 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	f040 814f 	bne.w	80058f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8148 	beq.w	80058f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8141 	beq.w	80058f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	f040 80b6 	bne.w	8005804 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8145 	beq.w	8005938 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f080 813e 	bcs.w	8005938 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ce:	f000 8088 	beq.w	80057e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800570a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1d9      	bne.n	80056d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800572e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800574a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e1      	bne.n	800571e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800576a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800576c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800577e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800578c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e3      	bne.n	80057a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fd fa92 	bl	8002d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8b7 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057fe:	e09b      	b.n	8005938 <HAL_UART_IRQHandler+0x518>
 8005800:	08005b71 	.word	0x08005b71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800580c:	b29b      	uxth	r3, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 808e 	beq.w	800593c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8089 	beq.w	800593c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800584e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005850:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e3      	bne.n	800582a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	623b      	str	r3, [r7, #32]
   return(result);
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005886:	633a      	str	r2, [r7, #48]	@ 0x30
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058cc:	61fa      	str	r2, [r7, #28]
 80058ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	617b      	str	r3, [r7, #20]
   return(result);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e3      	bne.n	80058a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f83d 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f2:	e023      	b.n	800593c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_UART_IRQHandler+0x4f4>
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f943 	bl	8005b98 <UART_Transmit_IT>
    return;
 8005912:	e014      	b.n	800593e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <HAL_UART_IRQHandler+0x51e>
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f983 	bl	8005c38 <UART_EndTransmit_IT>
    return;
 8005932:	e004      	b.n	800593e <HAL_UART_IRQHandler+0x51e>
    return;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <HAL_UART_IRQHandler+0x51e>
      return;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HAL_UART_IRQHandler+0x51e>
      return;
 800593c:	bf00      	nop
  }
}
 800593e:	37e8      	adds	r7, #232	@ 0xe8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	e03b      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d037      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7fc fc8f 	bl	80022c0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e03a      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d023      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b80      	cmp	r3, #128	@ 0x80
 80059ca:	d020      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b40      	cmp	r3, #64	@ 0x40
 80059d0:	d01d      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d116      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f857 	bl	8005aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2208      	movs	r2, #8
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d0b4      	beq.n	8005996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	88fa      	ldrh	r2, [r7, #6]
 8005a4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2222      	movs	r2, #34	@ 0x22
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a7a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0220 	orr.w	r2, r2, #32
 8005a9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b095      	sub	sp, #84	@ 0x54
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ad2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d119      	bne.n	8005b56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f023 0310 	bic.w	r3, r3, #16
 8005b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b42:	61ba      	str	r2, [r7, #24]
 8005b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6979      	ldr	r1, [r7, #20]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b64:	bf00      	nop
 8005b66:	3754      	adds	r7, #84	@ 0x54
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff fee4 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b21      	cmp	r3, #33	@ 0x21
 8005baa:	d13e      	bne.n	8005c2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d114      	bne.n	8005be0 <UART_Transmit_IT+0x48>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d110      	bne.n	8005be0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	1c9a      	adds	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]
 8005bde:	e008      	b.n	8005bf2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6211      	str	r1, [r2, #32]
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fe73 	bl	8005944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	@ 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b22      	cmp	r3, #34	@ 0x22
 8005c7a:	f040 80ae 	bne.w	8005dda <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c86:	d117      	bne.n	8005cb8 <UART_Receive_IT+0x50>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	1c9a      	adds	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb6:	e026      	b.n	8005d06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cca:	d007      	beq.n	8005cdc <UART_Receive_IT+0x74>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <UART_Receive_IT+0x82>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e008      	b.n	8005cfc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4619      	mov	r1, r3
 8005d14:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d15d      	bne.n	8005dd6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0220 	bic.w	r2, r2, #32
 8005d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d135      	bne.n	8005dcc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	613b      	str	r3, [r7, #16]
   return(result);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d86:	623a      	str	r2, [r7, #32]
 8005d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	69f9      	ldr	r1, [r7, #28]
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d10a      	bne.n	8005dbe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fdd1 	bl	800596c <HAL_UARTEx_RxEventCallback>
 8005dca:	e002      	b.n	8005dd2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fe7f 	bl	8001ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e002      	b.n	8005ddc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	@ 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0c0      	sub	sp, #256	@ 0x100
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	68d9      	ldr	r1, [r3, #12]
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	ea40 0301 	orr.w	r3, r0, r1
 8005e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e3c:	f021 010c 	bic.w	r1, r1, #12
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	ea40 0301 	orr.w	r3, r0, r1
 8005e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8f      	ldr	r3, [pc, #572]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d005      	beq.n	8005e84 <UART_SetConfig+0xa0>
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80060b4 <UART_SetConfig+0x2d0>)
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d104      	bne.n	8005e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fd fe3e 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8005e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e8c:	e003      	b.n	8005e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8e:	f7fd fe25 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea0:	f040 810c 	bne.w	80060bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	462b      	mov	r3, r5
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	eb12 0801 	adds.w	r8, r2, r1
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb43 0901 	adc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	eb49 0303 	adc.w	r3, r9, r3
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f12:	460b      	mov	r3, r1
 8005f14:	18db      	adds	r3, r3, r3
 8005f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f18:	4613      	mov	r3, r2
 8005f1a:	eb42 0303 	adc.w	r3, r2, r3
 8005f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f28:	f7fa f9b2 	bl	8000290 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4b61      	ldr	r3, [pc, #388]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005f32:	fba3 2302 	umull	r2, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	011c      	lsls	r4, r3, #4
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f54:	415b      	adcs	r3, r3
 8005f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f62:	4649      	mov	r1, r9
 8005f64:	eb43 0b01 	adc.w	fp, r3, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7c:	4692      	mov	sl, r2
 8005f7e:	469b      	mov	fp, r3
 8005f80:	4643      	mov	r3, r8
 8005f82:	eb1a 0303 	adds.w	r3, sl, r3
 8005f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	18db      	adds	r3, r3, r3
 8005fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fae:	4613      	mov	r3, r2
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fbe:	f7fa f967 	bl	8000290 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005fca:	fba3 2301 	umull	r2, r3, r3, r1
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2264      	movs	r2, #100	@ 0x64
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	1acb      	subs	r3, r1, r3
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fde:	4b36      	ldr	r3, [pc, #216]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fec:	441c      	add	r4, r3
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	1891      	adds	r1, r2, r2
 8006006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006008:	415b      	adcs	r3, r3
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800600c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006010:	4641      	mov	r1, r8
 8006012:	1851      	adds	r1, r2, r1
 8006014:	6339      	str	r1, [r7, #48]	@ 0x30
 8006016:	4649      	mov	r1, r9
 8006018:	414b      	adcs	r3, r1
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006028:	4659      	mov	r1, fp
 800602a:	00cb      	lsls	r3, r1, #3
 800602c:	4651      	mov	r1, sl
 800602e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006032:	4651      	mov	r1, sl
 8006034:	00ca      	lsls	r2, r1, #3
 8006036:	4610      	mov	r0, r2
 8006038:	4619      	mov	r1, r3
 800603a:	4603      	mov	r3, r0
 800603c:	4642      	mov	r2, r8
 800603e:	189b      	adds	r3, r3, r2
 8006040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006044:	464b      	mov	r3, r9
 8006046:	460a      	mov	r2, r1
 8006048:	eb42 0303 	adc.w	r3, r2, r3
 800604c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800605c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006064:	460b      	mov	r3, r1
 8006066:	18db      	adds	r3, r3, r3
 8006068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800606a:	4613      	mov	r3, r2
 800606c:	eb42 0303 	adc.w	r3, r2, r3
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800607a:	f7fa f909 	bl	8000290 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	@ 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	3332      	adds	r3, #50	@ 0x32
 8006096:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 0207 	and.w	r2, r3, #7
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4422      	add	r2, r4
 80060aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060ac:	e106      	b.n	80062bc <UART_SetConfig+0x4d8>
 80060ae:	bf00      	nop
 80060b0:	40011000 	.word	0x40011000
 80060b4:	40011400 	.word	0x40011400
 80060b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	6239      	str	r1, [r7, #32]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060de:	4641      	mov	r1, r8
 80060e0:	1854      	adds	r4, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0501 	adc.w	r5, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	00eb      	lsls	r3, r5, #3
 80060f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f6:	00e2      	lsls	r2, r4, #3
 80060f8:	4614      	mov	r4, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	4643      	mov	r3, r8
 80060fe:	18e3      	adds	r3, r4, r3
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006104:	464b      	mov	r3, r9
 8006106:	eb45 0303 	adc.w	r3, r5, r3
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800612a:	4629      	mov	r1, r5
 800612c:	008b      	lsls	r3, r1, #2
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006134:	4621      	mov	r1, r4
 8006136:	008a      	lsls	r2, r1, #2
 8006138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800613c:	f7fa f8a8 	bl	8000290 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b60      	ldr	r3, [pc, #384]	@ (80062c8 <UART_SetConfig+0x4e4>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011c      	lsls	r4, r3, #4
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800615c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	61b9      	str	r1, [r7, #24]
 8006168:	415b      	adcs	r3, r3
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006170:	4641      	mov	r1, r8
 8006172:	1851      	adds	r1, r2, r1
 8006174:	6139      	str	r1, [r7, #16]
 8006176:	4649      	mov	r1, r9
 8006178:	414b      	adcs	r3, r1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006188:	4659      	mov	r1, fp
 800618a:	00cb      	lsls	r3, r1, #3
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006192:	4651      	mov	r1, sl
 8006194:	00ca      	lsls	r2, r1, #3
 8006196:	4610      	mov	r0, r2
 8006198:	4619      	mov	r1, r3
 800619a:	4603      	mov	r3, r0
 800619c:	4642      	mov	r2, r8
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061c8:	4649      	mov	r1, r9
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	4641      	mov	r1, r8
 80061ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d2:	4641      	mov	r1, r8
 80061d4:	008a      	lsls	r2, r1, #2
 80061d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061da:	f7fa f859 	bl	8000290 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	4b38      	ldr	r3, [pc, #224]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80061e6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2264      	movs	r2, #100	@ 0x64
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	1acb      	subs	r3, r1, r3
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	3332      	adds	r3, #50	@ 0x32
 80061f8:	4a33      	ldr	r2, [pc, #204]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006204:	441c      	add	r4, r3
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	673b      	str	r3, [r7, #112]	@ 0x70
 800620e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	415b      	adcs	r3, r3
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006224:	4641      	mov	r1, r8
 8006226:	1851      	adds	r1, r2, r1
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	4649      	mov	r1, r9
 800622c:	414b      	adcs	r3, r1
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800623c:	4659      	mov	r1, fp
 800623e:	00cb      	lsls	r3, r1, #3
 8006240:	4651      	mov	r1, sl
 8006242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006246:	4651      	mov	r1, sl
 8006248:	00ca      	lsls	r2, r1, #3
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	4603      	mov	r3, r0
 8006250:	4642      	mov	r2, r8
 8006252:	189b      	adds	r3, r3, r2
 8006254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006256:	464b      	mov	r3, r9
 8006258:	460a      	mov	r2, r1
 800625a:	eb42 0303 	adc.w	r3, r2, r3
 800625e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	663b      	str	r3, [r7, #96]	@ 0x60
 800626a:	667a      	str	r2, [r7, #100]	@ 0x64
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006278:	4649      	mov	r1, r9
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	4641      	mov	r1, r8
 800627e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006282:	4641      	mov	r1, r8
 8006284:	008a      	lsls	r2, r1, #2
 8006286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800628a:	f7fa f801 	bl	8000290 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <UART_SetConfig+0x4e4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	@ 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	3332      	adds	r3, #50	@ 0x32
 80062a6:	4a08      	ldr	r2, [pc, #32]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4422      	add	r2, r4
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c8:	51eb851f 	.word	0x51eb851f

080062cc <siprintf>:
 80062cc:	b40e      	push	{r1, r2, r3}
 80062ce:	b500      	push	{lr}
 80062d0:	b09c      	sub	sp, #112	@ 0x70
 80062d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80062d4:	9002      	str	r0, [sp, #8]
 80062d6:	9006      	str	r0, [sp, #24]
 80062d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062dc:	4809      	ldr	r0, [pc, #36]	@ (8006304 <siprintf+0x38>)
 80062de:	9107      	str	r1, [sp, #28]
 80062e0:	9104      	str	r1, [sp, #16]
 80062e2:	4909      	ldr	r1, [pc, #36]	@ (8006308 <siprintf+0x3c>)
 80062e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	a902      	add	r1, sp, #8
 80062f0:	f000 f9c0 	bl	8006674 <_svfiprintf_r>
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	b01c      	add	sp, #112	@ 0x70
 80062fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006300:	b003      	add	sp, #12
 8006302:	4770      	bx	lr
 8006304:	2000000c 	.word	0x2000000c
 8006308:	ffff0208 	.word	0xffff0208

0800630c <siscanf>:
 800630c:	b40e      	push	{r1, r2, r3}
 800630e:	b530      	push	{r4, r5, lr}
 8006310:	b09c      	sub	sp, #112	@ 0x70
 8006312:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006314:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006318:	f854 5b04 	ldr.w	r5, [r4], #4
 800631c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006320:	9002      	str	r0, [sp, #8]
 8006322:	9006      	str	r0, [sp, #24]
 8006324:	f7f9 ff5c 	bl	80001e0 <strlen>
 8006328:	4b0b      	ldr	r3, [pc, #44]	@ (8006358 <siscanf+0x4c>)
 800632a:	9003      	str	r0, [sp, #12]
 800632c:	9007      	str	r0, [sp, #28]
 800632e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006330:	480a      	ldr	r0, [pc, #40]	@ (800635c <siscanf+0x50>)
 8006332:	9401      	str	r4, [sp, #4]
 8006334:	2300      	movs	r3, #0
 8006336:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006338:	9314      	str	r3, [sp, #80]	@ 0x50
 800633a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800633e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006342:	462a      	mov	r2, r5
 8006344:	4623      	mov	r3, r4
 8006346:	a902      	add	r1, sp, #8
 8006348:	6800      	ldr	r0, [r0, #0]
 800634a:	f000 fae7 	bl	800691c <__ssvfiscanf_r>
 800634e:	b01c      	add	sp, #112	@ 0x70
 8006350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006354:	b003      	add	sp, #12
 8006356:	4770      	bx	lr
 8006358:	08006361 	.word	0x08006361
 800635c:	2000000c 	.word	0x2000000c

08006360 <__seofread>:
 8006360:	2000      	movs	r0, #0
 8006362:	4770      	bx	lr

08006364 <memset>:
 8006364:	4402      	add	r2, r0
 8006366:	4603      	mov	r3, r0
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	f803 1b01 	strb.w	r1, [r3], #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	@ (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	@ (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	@ (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	@ (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	@ (80063c4 <__libc_init_array+0x44>)
 8006394:	f001 f8e0 	bl	8007558 <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08007ce0 	.word	0x08007ce0
 80063bc:	08007ce0 	.word	0x08007ce0
 80063c0:	08007ce0 	.word	0x08007ce0
 80063c4:	08007ce4 	.word	0x08007ce4

080063c8 <__retarget_lock_acquire_recursive>:
 80063c8:	4770      	bx	lr

080063ca <__retarget_lock_release_recursive>:
 80063ca:	4770      	bx	lr

080063cc <_free_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4605      	mov	r5, r0
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d041      	beq.n	8006458 <_free_r+0x8c>
 80063d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d8:	1f0c      	subs	r4, r1, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	18e4      	addlt	r4, r4, r3
 80063e0:	f000 f8e0 	bl	80065a4 <__malloc_lock>
 80063e4:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <_free_r+0x90>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	b933      	cbnz	r3, 80063f8 <_free_r+0x2c>
 80063ea:	6063      	str	r3, [r4, #4]
 80063ec:	6014      	str	r4, [r2, #0]
 80063ee:	4628      	mov	r0, r5
 80063f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f4:	f000 b8dc 	b.w	80065b0 <__malloc_unlock>
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d908      	bls.n	800640e <_free_r+0x42>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	1821      	adds	r1, r4, r0
 8006400:	428b      	cmp	r3, r1
 8006402:	bf01      	itttt	eq
 8006404:	6819      	ldreq	r1, [r3, #0]
 8006406:	685b      	ldreq	r3, [r3, #4]
 8006408:	1809      	addeq	r1, r1, r0
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	e7ed      	b.n	80063ea <_free_r+0x1e>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x4c>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x42>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1850      	adds	r0, r2, r1
 800641c:	42a0      	cmp	r0, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x6c>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	4401      	add	r1, r0
 8006424:	1850      	adds	r0, r2, r1
 8006426:	4283      	cmp	r3, r0
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1e0      	bne.n	80063ee <_free_r+0x22>
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4408      	add	r0, r1
 8006434:	6010      	str	r0, [r2, #0]
 8006436:	e7da      	b.n	80063ee <_free_r+0x22>
 8006438:	d902      	bls.n	8006440 <_free_r+0x74>
 800643a:	230c      	movs	r3, #12
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	e7d6      	b.n	80063ee <_free_r+0x22>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1809      	addeq	r1, r1, r0
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7ca      	b.n	80063ee <_free_r+0x22>
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	20000a1c 	.word	0x20000a1c

08006460 <sbrk_aligned>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4e0f      	ldr	r6, [pc, #60]	@ (80064a0 <sbrk_aligned+0x40>)
 8006464:	460c      	mov	r4, r1
 8006466:	6831      	ldr	r1, [r6, #0]
 8006468:	4605      	mov	r5, r0
 800646a:	b911      	cbnz	r1, 8006472 <sbrk_aligned+0x12>
 800646c:	f000 ff34 	bl	80072d8 <_sbrk_r>
 8006470:	6030      	str	r0, [r6, #0]
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f000 ff2f 	bl	80072d8 <_sbrk_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d103      	bne.n	8006486 <sbrk_aligned+0x26>
 800647e:	f04f 34ff 	mov.w	r4, #4294967295
 8006482:	4620      	mov	r0, r4
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	1cc4      	adds	r4, r0, #3
 8006488:	f024 0403 	bic.w	r4, r4, #3
 800648c:	42a0      	cmp	r0, r4
 800648e:	d0f8      	beq.n	8006482 <sbrk_aligned+0x22>
 8006490:	1a21      	subs	r1, r4, r0
 8006492:	4628      	mov	r0, r5
 8006494:	f000 ff20 	bl	80072d8 <_sbrk_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d1f2      	bne.n	8006482 <sbrk_aligned+0x22>
 800649c:	e7ef      	b.n	800647e <sbrk_aligned+0x1e>
 800649e:	bf00      	nop
 80064a0:	20000a18 	.word	0x20000a18

080064a4 <_malloc_r>:
 80064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	1ccd      	adds	r5, r1, #3
 80064aa:	f025 0503 	bic.w	r5, r5, #3
 80064ae:	3508      	adds	r5, #8
 80064b0:	2d0c      	cmp	r5, #12
 80064b2:	bf38      	it	cc
 80064b4:	250c      	movcc	r5, #12
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	4606      	mov	r6, r0
 80064ba:	db01      	blt.n	80064c0 <_malloc_r+0x1c>
 80064bc:	42a9      	cmp	r1, r5
 80064be:	d904      	bls.n	80064ca <_malloc_r+0x26>
 80064c0:	230c      	movs	r3, #12
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	2000      	movs	r0, #0
 80064c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065a0 <_malloc_r+0xfc>
 80064ce:	f000 f869 	bl	80065a4 <__malloc_lock>
 80064d2:	f8d8 3000 	ldr.w	r3, [r8]
 80064d6:	461c      	mov	r4, r3
 80064d8:	bb44      	cbnz	r4, 800652c <_malloc_r+0x88>
 80064da:	4629      	mov	r1, r5
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ffbf 	bl	8006460 <sbrk_aligned>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	4604      	mov	r4, r0
 80064e6:	d158      	bne.n	800659a <_malloc_r+0xf6>
 80064e8:	f8d8 4000 	ldr.w	r4, [r8]
 80064ec:	4627      	mov	r7, r4
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	d143      	bne.n	800657a <_malloc_r+0xd6>
 80064f2:	2c00      	cmp	r4, #0
 80064f4:	d04b      	beq.n	800658e <_malloc_r+0xea>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	4639      	mov	r1, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	eb04 0903 	add.w	r9, r4, r3
 8006500:	f000 feea 	bl	80072d8 <_sbrk_r>
 8006504:	4581      	cmp	r9, r0
 8006506:	d142      	bne.n	800658e <_malloc_r+0xea>
 8006508:	6821      	ldr	r1, [r4, #0]
 800650a:	1a6d      	subs	r5, r5, r1
 800650c:	4629      	mov	r1, r5
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ffa6 	bl	8006460 <sbrk_aligned>
 8006514:	3001      	adds	r0, #1
 8006516:	d03a      	beq.n	800658e <_malloc_r+0xea>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	442b      	add	r3, r5
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	f8d8 3000 	ldr.w	r3, [r8]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	bb62      	cbnz	r2, 8006580 <_malloc_r+0xdc>
 8006526:	f8c8 7000 	str.w	r7, [r8]
 800652a:	e00f      	b.n	800654c <_malloc_r+0xa8>
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	1b52      	subs	r2, r2, r5
 8006530:	d420      	bmi.n	8006574 <_malloc_r+0xd0>
 8006532:	2a0b      	cmp	r2, #11
 8006534:	d917      	bls.n	8006566 <_malloc_r+0xc2>
 8006536:	1961      	adds	r1, r4, r5
 8006538:	42a3      	cmp	r3, r4
 800653a:	6025      	str	r5, [r4, #0]
 800653c:	bf18      	it	ne
 800653e:	6059      	strne	r1, [r3, #4]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	bf08      	it	eq
 8006544:	f8c8 1000 	streq.w	r1, [r8]
 8006548:	5162      	str	r2, [r4, r5]
 800654a:	604b      	str	r3, [r1, #4]
 800654c:	4630      	mov	r0, r6
 800654e:	f000 f82f 	bl	80065b0 <__malloc_unlock>
 8006552:	f104 000b 	add.w	r0, r4, #11
 8006556:	1d23      	adds	r3, r4, #4
 8006558:	f020 0007 	bic.w	r0, r0, #7
 800655c:	1ac2      	subs	r2, r0, r3
 800655e:	bf1c      	itt	ne
 8006560:	1a1b      	subne	r3, r3, r0
 8006562:	50a3      	strne	r3, [r4, r2]
 8006564:	e7af      	b.n	80064c6 <_malloc_r+0x22>
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	42a3      	cmp	r3, r4
 800656a:	bf0c      	ite	eq
 800656c:	f8c8 2000 	streq.w	r2, [r8]
 8006570:	605a      	strne	r2, [r3, #4]
 8006572:	e7eb      	b.n	800654c <_malloc_r+0xa8>
 8006574:	4623      	mov	r3, r4
 8006576:	6864      	ldr	r4, [r4, #4]
 8006578:	e7ae      	b.n	80064d8 <_malloc_r+0x34>
 800657a:	463c      	mov	r4, r7
 800657c:	687f      	ldr	r7, [r7, #4]
 800657e:	e7b6      	b.n	80064ee <_malloc_r+0x4a>
 8006580:	461a      	mov	r2, r3
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	42a3      	cmp	r3, r4
 8006586:	d1fb      	bne.n	8006580 <_malloc_r+0xdc>
 8006588:	2300      	movs	r3, #0
 800658a:	6053      	str	r3, [r2, #4]
 800658c:	e7de      	b.n	800654c <_malloc_r+0xa8>
 800658e:	230c      	movs	r3, #12
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f80c 	bl	80065b0 <__malloc_unlock>
 8006598:	e794      	b.n	80064c4 <_malloc_r+0x20>
 800659a:	6005      	str	r5, [r0, #0]
 800659c:	e7d6      	b.n	800654c <_malloc_r+0xa8>
 800659e:	bf00      	nop
 80065a0:	20000a1c 	.word	0x20000a1c

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	@ (80065ac <__malloc_lock+0x8>)
 80065a6:	f7ff bf0f 	b.w	80063c8 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000a14 	.word	0x20000a14

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f7ff bf0a 	b.w	80063ca <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000a14 	.word	0x20000a14

080065bc <__ssputs_r>:
 80065bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	688e      	ldr	r6, [r1, #8]
 80065c2:	461f      	mov	r7, r3
 80065c4:	42be      	cmp	r6, r7
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	4682      	mov	sl, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4690      	mov	r8, r2
 80065ce:	d82d      	bhi.n	800662c <__ssputs_r+0x70>
 80065d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065d8:	d026      	beq.n	8006628 <__ssputs_r+0x6c>
 80065da:	6965      	ldr	r5, [r4, #20]
 80065dc:	6909      	ldr	r1, [r1, #16]
 80065de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065e2:	eba3 0901 	sub.w	r9, r3, r1
 80065e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065ea:	1c7b      	adds	r3, r7, #1
 80065ec:	444b      	add	r3, r9
 80065ee:	106d      	asrs	r5, r5, #1
 80065f0:	429d      	cmp	r5, r3
 80065f2:	bf38      	it	cc
 80065f4:	461d      	movcc	r5, r3
 80065f6:	0553      	lsls	r3, r2, #21
 80065f8:	d527      	bpl.n	800664a <__ssputs_r+0x8e>
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7ff ff52 	bl	80064a4 <_malloc_r>
 8006600:	4606      	mov	r6, r0
 8006602:	b360      	cbz	r0, 800665e <__ssputs_r+0xa2>
 8006604:	6921      	ldr	r1, [r4, #16]
 8006606:	464a      	mov	r2, r9
 8006608:	f000 fe76 	bl	80072f8 <memcpy>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	6126      	str	r6, [r4, #16]
 800661a:	6165      	str	r5, [r4, #20]
 800661c:	444e      	add	r6, r9
 800661e:	eba5 0509 	sub.w	r5, r5, r9
 8006622:	6026      	str	r6, [r4, #0]
 8006624:	60a5      	str	r5, [r4, #8]
 8006626:	463e      	mov	r6, r7
 8006628:	42be      	cmp	r6, r7
 800662a:	d900      	bls.n	800662e <__ssputs_r+0x72>
 800662c:	463e      	mov	r6, r7
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	4632      	mov	r2, r6
 8006632:	4641      	mov	r1, r8
 8006634:	f000 fe35 	bl	80072a2 <memmove>
 8006638:	68a3      	ldr	r3, [r4, #8]
 800663a:	1b9b      	subs	r3, r3, r6
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	4433      	add	r3, r6
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	2000      	movs	r0, #0
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	462a      	mov	r2, r5
 800664c:	f000 fe62 	bl	8007314 <_realloc_r>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d1e0      	bne.n	8006618 <__ssputs_r+0x5c>
 8006656:	6921      	ldr	r1, [r4, #16]
 8006658:	4650      	mov	r0, sl
 800665a:	f7ff feb7 	bl	80063cc <_free_r>
 800665e:	230c      	movs	r3, #12
 8006660:	f8ca 3000 	str.w	r3, [sl]
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e7e9      	b.n	8006646 <__ssputs_r+0x8a>
	...

08006674 <_svfiprintf_r>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4698      	mov	r8, r3
 800667a:	898b      	ldrh	r3, [r1, #12]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	b09d      	sub	sp, #116	@ 0x74
 8006680:	4607      	mov	r7, r0
 8006682:	460d      	mov	r5, r1
 8006684:	4614      	mov	r4, r2
 8006686:	d510      	bpl.n	80066aa <_svfiprintf_r+0x36>
 8006688:	690b      	ldr	r3, [r1, #16]
 800668a:	b973      	cbnz	r3, 80066aa <_svfiprintf_r+0x36>
 800668c:	2140      	movs	r1, #64	@ 0x40
 800668e:	f7ff ff09 	bl	80064a4 <_malloc_r>
 8006692:	6028      	str	r0, [r5, #0]
 8006694:	6128      	str	r0, [r5, #16]
 8006696:	b930      	cbnz	r0, 80066a6 <_svfiprintf_r+0x32>
 8006698:	230c      	movs	r3, #12
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b01d      	add	sp, #116	@ 0x74
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a6:	2340      	movs	r3, #64	@ 0x40
 80066a8:	616b      	str	r3, [r5, #20]
 80066aa:	2300      	movs	r3, #0
 80066ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ae:	2320      	movs	r3, #32
 80066b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b8:	2330      	movs	r3, #48	@ 0x30
 80066ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006858 <_svfiprintf_r+0x1e4>
 80066be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066c2:	f04f 0901 	mov.w	r9, #1
 80066c6:	4623      	mov	r3, r4
 80066c8:	469a      	mov	sl, r3
 80066ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ce:	b10a      	cbz	r2, 80066d4 <_svfiprintf_r+0x60>
 80066d0:	2a25      	cmp	r2, #37	@ 0x25
 80066d2:	d1f9      	bne.n	80066c8 <_svfiprintf_r+0x54>
 80066d4:	ebba 0b04 	subs.w	fp, sl, r4
 80066d8:	d00b      	beq.n	80066f2 <_svfiprintf_r+0x7e>
 80066da:	465b      	mov	r3, fp
 80066dc:	4622      	mov	r2, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff ff6b 	bl	80065bc <__ssputs_r>
 80066e6:	3001      	adds	r0, #1
 80066e8:	f000 80a7 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066ee:	445a      	add	r2, fp
 80066f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80066f2:	f89a 3000 	ldrb.w	r3, [sl]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 809f 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066fc:	2300      	movs	r3, #0
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006706:	f10a 0a01 	add.w	sl, sl, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006712:	931a      	str	r3, [sp, #104]	@ 0x68
 8006714:	4654      	mov	r4, sl
 8006716:	2205      	movs	r2, #5
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	484e      	ldr	r0, [pc, #312]	@ (8006858 <_svfiprintf_r+0x1e4>)
 800671e:	f7f9 fd67 	bl	80001f0 <memchr>
 8006722:	9a04      	ldr	r2, [sp, #16]
 8006724:	b9d8      	cbnz	r0, 800675e <_svfiprintf_r+0xea>
 8006726:	06d0      	lsls	r0, r2, #27
 8006728:	bf44      	itt	mi
 800672a:	2320      	movmi	r3, #32
 800672c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006730:	0711      	lsls	r1, r2, #28
 8006732:	bf44      	itt	mi
 8006734:	232b      	movmi	r3, #43	@ 0x2b
 8006736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800673a:	f89a 3000 	ldrb.w	r3, [sl]
 800673e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006740:	d015      	beq.n	800676e <_svfiprintf_r+0xfa>
 8006742:	9a07      	ldr	r2, [sp, #28]
 8006744:	4654      	mov	r4, sl
 8006746:	2000      	movs	r0, #0
 8006748:	f04f 0c0a 	mov.w	ip, #10
 800674c:	4621      	mov	r1, r4
 800674e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006752:	3b30      	subs	r3, #48	@ 0x30
 8006754:	2b09      	cmp	r3, #9
 8006756:	d94b      	bls.n	80067f0 <_svfiprintf_r+0x17c>
 8006758:	b1b0      	cbz	r0, 8006788 <_svfiprintf_r+0x114>
 800675a:	9207      	str	r2, [sp, #28]
 800675c:	e014      	b.n	8006788 <_svfiprintf_r+0x114>
 800675e:	eba0 0308 	sub.w	r3, r0, r8
 8006762:	fa09 f303 	lsl.w	r3, r9, r3
 8006766:	4313      	orrs	r3, r2
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	46a2      	mov	sl, r4
 800676c:	e7d2      	b.n	8006714 <_svfiprintf_r+0xa0>
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	1d19      	adds	r1, r3, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	bfbb      	ittet	lt
 800677a:	425b      	neglt	r3, r3
 800677c:	f042 0202 	orrlt.w	r2, r2, #2
 8006780:	9307      	strge	r3, [sp, #28]
 8006782:	9307      	strlt	r3, [sp, #28]
 8006784:	bfb8      	it	lt
 8006786:	9204      	strlt	r2, [sp, #16]
 8006788:	7823      	ldrb	r3, [r4, #0]
 800678a:	2b2e      	cmp	r3, #46	@ 0x2e
 800678c:	d10a      	bne.n	80067a4 <_svfiprintf_r+0x130>
 800678e:	7863      	ldrb	r3, [r4, #1]
 8006790:	2b2a      	cmp	r3, #42	@ 0x2a
 8006792:	d132      	bne.n	80067fa <_svfiprintf_r+0x186>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	9203      	str	r2, [sp, #12]
 800679c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a0:	3402      	adds	r4, #2
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006868 <_svfiprintf_r+0x1f4>
 80067a8:	7821      	ldrb	r1, [r4, #0]
 80067aa:	2203      	movs	r2, #3
 80067ac:	4650      	mov	r0, sl
 80067ae:	f7f9 fd1f 	bl	80001f0 <memchr>
 80067b2:	b138      	cbz	r0, 80067c4 <_svfiprintf_r+0x150>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	eba0 000a 	sub.w	r0, r0, sl
 80067ba:	2240      	movs	r2, #64	@ 0x40
 80067bc:	4082      	lsls	r2, r0
 80067be:	4313      	orrs	r3, r2
 80067c0:	3401      	adds	r4, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4824      	ldr	r0, [pc, #144]	@ (800685c <_svfiprintf_r+0x1e8>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	f7f9 fd0e 	bl	80001f0 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d036      	beq.n	8006846 <_svfiprintf_r+0x1d2>
 80067d8:	4b21      	ldr	r3, [pc, #132]	@ (8006860 <_svfiprintf_r+0x1ec>)
 80067da:	bb1b      	cbnz	r3, 8006824 <_svfiprintf_r+0x1b0>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3307      	adds	r3, #7
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	4433      	add	r3, r6
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	e76a      	b.n	80066c6 <_svfiprintf_r+0x52>
 80067f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f4:	460c      	mov	r4, r1
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a8      	b.n	800674c <_svfiprintf_r+0xd8>
 80067fa:	2300      	movs	r3, #0
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4620      	mov	r0, r4
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	@ 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_svfiprintf_r+0x1a6>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c6      	beq.n	80067a4 <_svfiprintf_r+0x130>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c4      	b.n	80067a4 <_svfiprintf_r+0x130>
 800681a:	fb0c 2101 	mla	r1, ip, r1, r2
 800681e:	4604      	mov	r4, r0
 8006820:	2301      	movs	r3, #1
 8006822:	e7f0      	b.n	8006806 <_svfiprintf_r+0x192>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	462a      	mov	r2, r5
 800682a:	4b0e      	ldr	r3, [pc, #56]	@ (8006864 <_svfiprintf_r+0x1f0>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4638      	mov	r0, r7
 8006830:	f3af 8000 	nop.w
 8006834:	1c42      	adds	r2, r0, #1
 8006836:	4606      	mov	r6, r0
 8006838:	d1d6      	bne.n	80067e8 <_svfiprintf_r+0x174>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	065b      	lsls	r3, r3, #25
 800683e:	f53f af2d 	bmi.w	800669c <_svfiprintf_r+0x28>
 8006842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006844:	e72c      	b.n	80066a0 <_svfiprintf_r+0x2c>
 8006846:	ab03      	add	r3, sp, #12
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	462a      	mov	r2, r5
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <_svfiprintf_r+0x1f0>)
 800684e:	a904      	add	r1, sp, #16
 8006850:	4638      	mov	r0, r7
 8006852:	f000 fa45 	bl	8006ce0 <_printf_i>
 8006856:	e7ed      	b.n	8006834 <_svfiprintf_r+0x1c0>
 8006858:	08007b88 	.word	0x08007b88
 800685c:	08007b92 	.word	0x08007b92
 8006860:	00000000 	.word	0x00000000
 8006864:	080065bd 	.word	0x080065bd
 8006868:	08007b8e 	.word	0x08007b8e

0800686c <_sungetc_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	1c4b      	adds	r3, r1, #1
 8006870:	4614      	mov	r4, r2
 8006872:	d103      	bne.n	800687c <_sungetc_r+0x10>
 8006874:	f04f 35ff 	mov.w	r5, #4294967295
 8006878:	4628      	mov	r0, r5
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	8993      	ldrh	r3, [r2, #12]
 800687e:	f023 0320 	bic.w	r3, r3, #32
 8006882:	8193      	strh	r3, [r2, #12]
 8006884:	6853      	ldr	r3, [r2, #4]
 8006886:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006888:	b2cd      	uxtb	r5, r1
 800688a:	b18a      	cbz	r2, 80068b0 <_sungetc_r+0x44>
 800688c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800688e:	429a      	cmp	r2, r3
 8006890:	dd08      	ble.n	80068a4 <_sungetc_r+0x38>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	f803 5c01 	strb.w	r5, [r3, #-1]
 800689c:	6863      	ldr	r3, [r4, #4]
 800689e:	3301      	adds	r3, #1
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	e7e9      	b.n	8006878 <_sungetc_r+0xc>
 80068a4:	4621      	mov	r1, r4
 80068a6:	f000 fcc2 	bl	800722e <__submore>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0f1      	beq.n	8006892 <_sungetc_r+0x26>
 80068ae:	e7e1      	b.n	8006874 <_sungetc_r+0x8>
 80068b0:	6921      	ldr	r1, [r4, #16]
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	b141      	cbz	r1, 80068c8 <_sungetc_r+0x5c>
 80068b6:	4291      	cmp	r1, r2
 80068b8:	d206      	bcs.n	80068c8 <_sungetc_r+0x5c>
 80068ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80068be:	42a9      	cmp	r1, r5
 80068c0:	d102      	bne.n	80068c8 <_sungetc_r+0x5c>
 80068c2:	3a01      	subs	r2, #1
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	e7ea      	b.n	800689e <_sungetc_r+0x32>
 80068c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80068cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80068d2:	2303      	movs	r3, #3
 80068d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80068d6:	4623      	mov	r3, r4
 80068d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	2301      	movs	r3, #1
 80068e0:	e7de      	b.n	80068a0 <_sungetc_r+0x34>

080068e2 <__ssrefill_r>:
 80068e2:	b510      	push	{r4, lr}
 80068e4:	460c      	mov	r4, r1
 80068e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80068e8:	b169      	cbz	r1, 8006906 <__ssrefill_r+0x24>
 80068ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068ee:	4299      	cmp	r1, r3
 80068f0:	d001      	beq.n	80068f6 <__ssrefill_r+0x14>
 80068f2:	f7ff fd6b 	bl	80063cc <_free_r>
 80068f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	2000      	movs	r0, #0
 80068fc:	6360      	str	r0, [r4, #52]	@ 0x34
 80068fe:	b113      	cbz	r3, 8006906 <__ssrefill_r+0x24>
 8006900:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	bd10      	pop	{r4, pc}
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f043 0320 	orr.w	r3, r3, #32
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	e7f3      	b.n	8006904 <__ssrefill_r+0x22>

0800691c <__ssvfiscanf_r>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006926:	2100      	movs	r1, #0
 8006928:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800692c:	49a5      	ldr	r1, [pc, #660]	@ (8006bc4 <__ssvfiscanf_r+0x2a8>)
 800692e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006930:	f10d 0804 	add.w	r8, sp, #4
 8006934:	49a4      	ldr	r1, [pc, #656]	@ (8006bc8 <__ssvfiscanf_r+0x2ac>)
 8006936:	4fa5      	ldr	r7, [pc, #660]	@ (8006bcc <__ssvfiscanf_r+0x2b0>)
 8006938:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800693c:	4606      	mov	r6, r0
 800693e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	7813      	ldrb	r3, [r2, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8158 	beq.w	8006bfa <__ssvfiscanf_r+0x2de>
 800694a:	5cf9      	ldrb	r1, [r7, r3]
 800694c:	f011 0108 	ands.w	r1, r1, #8
 8006950:	f102 0501 	add.w	r5, r2, #1
 8006954:	d019      	beq.n	800698a <__ssvfiscanf_r+0x6e>
 8006956:	6863      	ldr	r3, [r4, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dd0f      	ble.n	800697c <__ssvfiscanf_r+0x60>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	5cba      	ldrb	r2, [r7, r2]
 8006962:	0712      	lsls	r2, r2, #28
 8006964:	d401      	bmi.n	800696a <__ssvfiscanf_r+0x4e>
 8006966:	462a      	mov	r2, r5
 8006968:	e7eb      	b.n	8006942 <__ssvfiscanf_r+0x26>
 800696a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800696c:	3201      	adds	r2, #1
 800696e:	9245      	str	r2, [sp, #276]	@ 0x114
 8006970:	6862      	ldr	r2, [r4, #4]
 8006972:	3301      	adds	r3, #1
 8006974:	3a01      	subs	r2, #1
 8006976:	6062      	str	r2, [r4, #4]
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	e7ec      	b.n	8006956 <__ssvfiscanf_r+0x3a>
 800697c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800697e:	4621      	mov	r1, r4
 8006980:	4630      	mov	r0, r6
 8006982:	4798      	blx	r3
 8006984:	2800      	cmp	r0, #0
 8006986:	d0e9      	beq.n	800695c <__ssvfiscanf_r+0x40>
 8006988:	e7ed      	b.n	8006966 <__ssvfiscanf_r+0x4a>
 800698a:	2b25      	cmp	r3, #37	@ 0x25
 800698c:	d012      	beq.n	80069b4 <__ssvfiscanf_r+0x98>
 800698e:	4699      	mov	r9, r3
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f340 8093 	ble.w	8006abe <__ssvfiscanf_r+0x1a2>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	7813      	ldrb	r3, [r2, #0]
 800699c:	454b      	cmp	r3, r9
 800699e:	f040 812c 	bne.w	8006bfa <__ssvfiscanf_r+0x2de>
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80069aa:	3201      	adds	r2, #1
 80069ac:	3301      	adds	r3, #1
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	9345      	str	r3, [sp, #276]	@ 0x114
 80069b2:	e7d8      	b.n	8006966 <__ssvfiscanf_r+0x4a>
 80069b4:	9141      	str	r1, [sp, #260]	@ 0x104
 80069b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80069b8:	7853      	ldrb	r3, [r2, #1]
 80069ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80069bc:	bf02      	ittt	eq
 80069be:	2310      	moveq	r3, #16
 80069c0:	1c95      	addeq	r5, r2, #2
 80069c2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80069c4:	220a      	movs	r2, #10
 80069c6:	46a9      	mov	r9, r5
 80069c8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80069cc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80069d0:	2b09      	cmp	r3, #9
 80069d2:	d91e      	bls.n	8006a12 <__ssvfiscanf_r+0xf6>
 80069d4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006bd0 <__ssvfiscanf_r+0x2b4>
 80069d8:	2203      	movs	r2, #3
 80069da:	4650      	mov	r0, sl
 80069dc:	f7f9 fc08 	bl	80001f0 <memchr>
 80069e0:	b138      	cbz	r0, 80069f2 <__ssvfiscanf_r+0xd6>
 80069e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069e4:	eba0 000a 	sub.w	r0, r0, sl
 80069e8:	2301      	movs	r3, #1
 80069ea:	4083      	lsls	r3, r0
 80069ec:	4313      	orrs	r3, r2
 80069ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80069f0:	464d      	mov	r5, r9
 80069f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069f6:	2b78      	cmp	r3, #120	@ 0x78
 80069f8:	d806      	bhi.n	8006a08 <__ssvfiscanf_r+0xec>
 80069fa:	2b57      	cmp	r3, #87	@ 0x57
 80069fc:	d810      	bhi.n	8006a20 <__ssvfiscanf_r+0x104>
 80069fe:	2b25      	cmp	r3, #37	@ 0x25
 8006a00:	d0c5      	beq.n	800698e <__ssvfiscanf_r+0x72>
 8006a02:	d857      	bhi.n	8006ab4 <__ssvfiscanf_r+0x198>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d065      	beq.n	8006ad4 <__ssvfiscanf_r+0x1b8>
 8006a08:	2303      	movs	r3, #3
 8006a0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006a0c:	230a      	movs	r3, #10
 8006a0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006a10:	e078      	b.n	8006b04 <__ssvfiscanf_r+0x1e8>
 8006a12:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006a14:	fb02 1103 	mla	r1, r2, r3, r1
 8006a18:	3930      	subs	r1, #48	@ 0x30
 8006a1a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006a1c:	464d      	mov	r5, r9
 8006a1e:	e7d2      	b.n	80069c6 <__ssvfiscanf_r+0xaa>
 8006a20:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006a24:	2a20      	cmp	r2, #32
 8006a26:	d8ef      	bhi.n	8006a08 <__ssvfiscanf_r+0xec>
 8006a28:	a101      	add	r1, pc, #4	@ (adr r1, 8006a30 <__ssvfiscanf_r+0x114>)
 8006a2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006ae3 	.word	0x08006ae3
 8006a34:	08006a09 	.word	0x08006a09
 8006a38:	08006a09 	.word	0x08006a09
 8006a3c:	08006b3d 	.word	0x08006b3d
 8006a40:	08006a09 	.word	0x08006a09
 8006a44:	08006a09 	.word	0x08006a09
 8006a48:	08006a09 	.word	0x08006a09
 8006a4c:	08006a09 	.word	0x08006a09
 8006a50:	08006a09 	.word	0x08006a09
 8006a54:	08006a09 	.word	0x08006a09
 8006a58:	08006a09 	.word	0x08006a09
 8006a5c:	08006b53 	.word	0x08006b53
 8006a60:	08006b39 	.word	0x08006b39
 8006a64:	08006abb 	.word	0x08006abb
 8006a68:	08006abb 	.word	0x08006abb
 8006a6c:	08006abb 	.word	0x08006abb
 8006a70:	08006a09 	.word	0x08006a09
 8006a74:	08006af5 	.word	0x08006af5
 8006a78:	08006a09 	.word	0x08006a09
 8006a7c:	08006a09 	.word	0x08006a09
 8006a80:	08006a09 	.word	0x08006a09
 8006a84:	08006a09 	.word	0x08006a09
 8006a88:	08006b63 	.word	0x08006b63
 8006a8c:	08006afd 	.word	0x08006afd
 8006a90:	08006adb 	.word	0x08006adb
 8006a94:	08006a09 	.word	0x08006a09
 8006a98:	08006a09 	.word	0x08006a09
 8006a9c:	08006b5f 	.word	0x08006b5f
 8006aa0:	08006a09 	.word	0x08006a09
 8006aa4:	08006b39 	.word	0x08006b39
 8006aa8:	08006a09 	.word	0x08006a09
 8006aac:	08006a09 	.word	0x08006a09
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	3b45      	subs	r3, #69	@ 0x45
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d8a6      	bhi.n	8006a08 <__ssvfiscanf_r+0xec>
 8006aba:	2305      	movs	r3, #5
 8006abc:	e021      	b.n	8006b02 <__ssvfiscanf_r+0x1e6>
 8006abe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	4798      	blx	r3
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af66 	beq.w	8006998 <__ssvfiscanf_r+0x7c>
 8006acc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f040 808b 	bne.w	8006bea <__ssvfiscanf_r+0x2ce>
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	e08b      	b.n	8006bf2 <__ssvfiscanf_r+0x2d6>
 8006ada:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006adc:	f042 0220 	orr.w	r2, r2, #32
 8006ae0:	9241      	str	r2, [sp, #260]	@ 0x104
 8006ae2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ae8:	9241      	str	r2, [sp, #260]	@ 0x104
 8006aea:	2210      	movs	r2, #16
 8006aec:	2b6e      	cmp	r3, #110	@ 0x6e
 8006aee:	9242      	str	r2, [sp, #264]	@ 0x108
 8006af0:	d902      	bls.n	8006af8 <__ssvfiscanf_r+0x1dc>
 8006af2:	e005      	b.n	8006b00 <__ssvfiscanf_r+0x1e4>
 8006af4:	2300      	movs	r3, #0
 8006af6:	9342      	str	r3, [sp, #264]	@ 0x108
 8006af8:	2303      	movs	r3, #3
 8006afa:	e002      	b.n	8006b02 <__ssvfiscanf_r+0x1e6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	9342      	str	r3, [sp, #264]	@ 0x108
 8006b00:	2304      	movs	r3, #4
 8006b02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd39      	ble.n	8006b7e <__ssvfiscanf_r+0x262>
 8006b0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006b0c:	0659      	lsls	r1, r3, #25
 8006b0e:	d404      	bmi.n	8006b1a <__ssvfiscanf_r+0x1fe>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	5cba      	ldrb	r2, [r7, r2]
 8006b16:	0712      	lsls	r2, r2, #28
 8006b18:	d438      	bmi.n	8006b8c <__ssvfiscanf_r+0x270>
 8006b1a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	dc47      	bgt.n	8006bb0 <__ssvfiscanf_r+0x294>
 8006b20:	466b      	mov	r3, sp
 8006b22:	4622      	mov	r2, r4
 8006b24:	a941      	add	r1, sp, #260	@ 0x104
 8006b26:	4630      	mov	r0, r6
 8006b28:	f000 f9fa 	bl	8006f20 <_scanf_chars>
 8006b2c:	2801      	cmp	r0, #1
 8006b2e:	d064      	beq.n	8006bfa <__ssvfiscanf_r+0x2de>
 8006b30:	2802      	cmp	r0, #2
 8006b32:	f47f af18 	bne.w	8006966 <__ssvfiscanf_r+0x4a>
 8006b36:	e7c9      	b.n	8006acc <__ssvfiscanf_r+0x1b0>
 8006b38:	220a      	movs	r2, #10
 8006b3a:	e7d7      	b.n	8006aec <__ssvfiscanf_r+0x1d0>
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4640      	mov	r0, r8
 8006b40:	f000 fb3c 	bl	80071bc <__sccl>
 8006b44:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7d7      	b.n	8006b02 <__ssvfiscanf_r+0x1e6>
 8006b52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b58:	9341      	str	r3, [sp, #260]	@ 0x104
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e7d1      	b.n	8006b02 <__ssvfiscanf_r+0x1e6>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e7cf      	b.n	8006b02 <__ssvfiscanf_r+0x1e6>
 8006b62:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006b64:	06c3      	lsls	r3, r0, #27
 8006b66:	f53f aefe 	bmi.w	8006966 <__ssvfiscanf_r+0x4a>
 8006b6a:	9b00      	ldr	r3, [sp, #0]
 8006b6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006b6e:	1d19      	adds	r1, r3, #4
 8006b70:	9100      	str	r1, [sp, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	07c0      	lsls	r0, r0, #31
 8006b76:	bf4c      	ite	mi
 8006b78:	801a      	strhmi	r2, [r3, #0]
 8006b7a:	601a      	strpl	r2, [r3, #0]
 8006b7c:	e6f3      	b.n	8006966 <__ssvfiscanf_r+0x4a>
 8006b7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006b80:	4621      	mov	r1, r4
 8006b82:	4630      	mov	r0, r6
 8006b84:	4798      	blx	r3
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d0bf      	beq.n	8006b0a <__ssvfiscanf_r+0x1ee>
 8006b8a:	e79f      	b.n	8006acc <__ssvfiscanf_r+0x1b0>
 8006b8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006b8e:	3201      	adds	r2, #1
 8006b90:	9245      	str	r2, [sp, #276]	@ 0x114
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	3a01      	subs	r2, #1
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	6062      	str	r2, [r4, #4]
 8006b9a:	dd02      	ble.n	8006ba2 <__ssvfiscanf_r+0x286>
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	e7b6      	b.n	8006b10 <__ssvfiscanf_r+0x1f4>
 8006ba2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4798      	blx	r3
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0b0      	beq.n	8006b10 <__ssvfiscanf_r+0x1f4>
 8006bae:	e78d      	b.n	8006acc <__ssvfiscanf_r+0x1b0>
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	dc0f      	bgt.n	8006bd4 <__ssvfiscanf_r+0x2b8>
 8006bb4:	466b      	mov	r3, sp
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	a941      	add	r1, sp, #260	@ 0x104
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f000 fa0a 	bl	8006fd4 <_scanf_i>
 8006bc0:	e7b4      	b.n	8006b2c <__ssvfiscanf_r+0x210>
 8006bc2:	bf00      	nop
 8006bc4:	0800686d 	.word	0x0800686d
 8006bc8:	080068e3 	.word	0x080068e3
 8006bcc:	08007bd7 	.word	0x08007bd7
 8006bd0:	08007b8e 	.word	0x08007b8e
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <__ssvfiscanf_r+0x2e4>)
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f43f aec5 	beq.w	8006966 <__ssvfiscanf_r+0x4a>
 8006bdc:	466b      	mov	r3, sp
 8006bde:	4622      	mov	r2, r4
 8006be0:	a941      	add	r1, sp, #260	@ 0x104
 8006be2:	4630      	mov	r0, r6
 8006be4:	f3af 8000 	nop.w
 8006be8:	e7a0      	b.n	8006b2c <__ssvfiscanf_r+0x210>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	065b      	lsls	r3, r3, #25
 8006bee:	f53f af71 	bmi.w	8006ad4 <__ssvfiscanf_r+0x1b8>
 8006bf2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006bfc:	e7f9      	b.n	8006bf2 <__ssvfiscanf_r+0x2d6>
 8006bfe:	bf00      	nop
 8006c00:	00000000 	.word	0x00000000

08006c04 <_printf_common>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	4616      	mov	r6, r2
 8006c0a:	4698      	mov	r8, r3
 8006c0c:	688a      	ldr	r2, [r1, #8]
 8006c0e:	690b      	ldr	r3, [r1, #16]
 8006c10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bfb8      	it	lt
 8006c18:	4613      	movlt	r3, r2
 8006c1a:	6033      	str	r3, [r6, #0]
 8006c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c20:	4607      	mov	r7, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	b10a      	cbz	r2, 8006c2a <_printf_common+0x26>
 8006c26:	3301      	adds	r3, #1
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	0699      	lsls	r1, r3, #26
 8006c2e:	bf42      	ittt	mi
 8006c30:	6833      	ldrmi	r3, [r6, #0]
 8006c32:	3302      	addmi	r3, #2
 8006c34:	6033      	strmi	r3, [r6, #0]
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	f015 0506 	ands.w	r5, r5, #6
 8006c3c:	d106      	bne.n	8006c4c <_printf_common+0x48>
 8006c3e:	f104 0a19 	add.w	sl, r4, #25
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	6832      	ldr	r2, [r6, #0]
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	42ab      	cmp	r3, r5
 8006c4a:	dc26      	bgt.n	8006c9a <_printf_common+0x96>
 8006c4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c50:	6822      	ldr	r2, [r4, #0]
 8006c52:	3b00      	subs	r3, #0
 8006c54:	bf18      	it	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	0692      	lsls	r2, r2, #26
 8006c5a:	d42b      	bmi.n	8006cb4 <_printf_common+0xb0>
 8006c5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c60:	4641      	mov	r1, r8
 8006c62:	4638      	mov	r0, r7
 8006c64:	47c8      	blx	r9
 8006c66:	3001      	adds	r0, #1
 8006c68:	d01e      	beq.n	8006ca8 <_printf_common+0xa4>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	6922      	ldr	r2, [r4, #16]
 8006c6e:	f003 0306 	and.w	r3, r3, #6
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	bf02      	ittt	eq
 8006c76:	68e5      	ldreq	r5, [r4, #12]
 8006c78:	6833      	ldreq	r3, [r6, #0]
 8006c7a:	1aed      	subeq	r5, r5, r3
 8006c7c:	68a3      	ldr	r3, [r4, #8]
 8006c7e:	bf0c      	ite	eq
 8006c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c84:	2500      	movne	r5, #0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bfc4      	itt	gt
 8006c8a:	1a9b      	subgt	r3, r3, r2
 8006c8c:	18ed      	addgt	r5, r5, r3
 8006c8e:	2600      	movs	r6, #0
 8006c90:	341a      	adds	r4, #26
 8006c92:	42b5      	cmp	r5, r6
 8006c94:	d11a      	bne.n	8006ccc <_printf_common+0xc8>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e008      	b.n	8006cac <_printf_common+0xa8>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	47c8      	blx	r9
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d103      	bne.n	8006cb0 <_printf_common+0xac>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	e7c6      	b.n	8006c42 <_printf_common+0x3e>
 8006cb4:	18e1      	adds	r1, r4, r3
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	2030      	movs	r0, #48	@ 0x30
 8006cba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cbe:	4422      	add	r2, r4
 8006cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cc8:	3302      	adds	r3, #2
 8006cca:	e7c7      	b.n	8006c5c <_printf_common+0x58>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4641      	mov	r1, r8
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	47c8      	blx	r9
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d0e6      	beq.n	8006ca8 <_printf_common+0xa4>
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7d9      	b.n	8006c92 <_printf_common+0x8e>
	...

08006ce0 <_printf_i>:
 8006ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	7e0f      	ldrb	r7, [r1, #24]
 8006ce6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ce8:	2f78      	cmp	r7, #120	@ 0x78
 8006cea:	4691      	mov	r9, r2
 8006cec:	4680      	mov	r8, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	469a      	mov	sl, r3
 8006cf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cf6:	d807      	bhi.n	8006d08 <_printf_i+0x28>
 8006cf8:	2f62      	cmp	r7, #98	@ 0x62
 8006cfa:	d80a      	bhi.n	8006d12 <_printf_i+0x32>
 8006cfc:	2f00      	cmp	r7, #0
 8006cfe:	f000 80d2 	beq.w	8006ea6 <_printf_i+0x1c6>
 8006d02:	2f58      	cmp	r7, #88	@ 0x58
 8006d04:	f000 80b9 	beq.w	8006e7a <_printf_i+0x19a>
 8006d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d10:	e03a      	b.n	8006d88 <_printf_i+0xa8>
 8006d12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d16:	2b15      	cmp	r3, #21
 8006d18:	d8f6      	bhi.n	8006d08 <_printf_i+0x28>
 8006d1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d20 <_printf_i+0x40>)
 8006d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d09 	.word	0x08006d09
 8006d2c:	08006d09 	.word	0x08006d09
 8006d30:	08006d09 	.word	0x08006d09
 8006d34:	08006d09 	.word	0x08006d09
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006d09 	.word	0x08006d09
 8006d40:	08006d09 	.word	0x08006d09
 8006d44:	08006d09 	.word	0x08006d09
 8006d48:	08006d09 	.word	0x08006d09
 8006d4c:	08006e8d 	.word	0x08006e8d
 8006d50:	08006db7 	.word	0x08006db7
 8006d54:	08006e47 	.word	0x08006e47
 8006d58:	08006d09 	.word	0x08006d09
 8006d5c:	08006d09 	.word	0x08006d09
 8006d60:	08006eaf 	.word	0x08006eaf
 8006d64:	08006d09 	.word	0x08006d09
 8006d68:	08006db7 	.word	0x08006db7
 8006d6c:	08006d09 	.word	0x08006d09
 8006d70:	08006d09 	.word	0x08006d09
 8006d74:	08006e4f 	.word	0x08006e4f
 8006d78:	6833      	ldr	r3, [r6, #0]
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6032      	str	r2, [r6, #0]
 8006d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e09d      	b.n	8006ec8 <_printf_i+0x1e8>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	6820      	ldr	r0, [r4, #0]
 8006d90:	1d19      	adds	r1, r3, #4
 8006d92:	6031      	str	r1, [r6, #0]
 8006d94:	0606      	lsls	r6, r0, #24
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0xbc>
 8006d98:	681d      	ldr	r5, [r3, #0]
 8006d9a:	e003      	b.n	8006da4 <_printf_i+0xc4>
 8006d9c:	0645      	lsls	r5, r0, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0xb8>
 8006da0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	da03      	bge.n	8006db0 <_printf_i+0xd0>
 8006da8:	232d      	movs	r3, #45	@ 0x2d
 8006daa:	426d      	negs	r5, r5
 8006dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db0:	4859      	ldr	r0, [pc, #356]	@ (8006f18 <_printf_i+0x238>)
 8006db2:	230a      	movs	r3, #10
 8006db4:	e011      	b.n	8006dda <_printf_i+0xfa>
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	0608      	lsls	r0, r1, #24
 8006dbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dc0:	d402      	bmi.n	8006dc8 <_printf_i+0xe8>
 8006dc2:	0649      	lsls	r1, r1, #25
 8006dc4:	bf48      	it	mi
 8006dc6:	b2ad      	uxthmi	r5, r5
 8006dc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dca:	4853      	ldr	r0, [pc, #332]	@ (8006f18 <_printf_i+0x238>)
 8006dcc:	6033      	str	r3, [r6, #0]
 8006dce:	bf14      	ite	ne
 8006dd0:	230a      	movne	r3, #10
 8006dd2:	2308      	moveq	r3, #8
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dda:	6866      	ldr	r6, [r4, #4]
 8006ddc:	60a6      	str	r6, [r4, #8]
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	bfa2      	ittt	ge
 8006de2:	6821      	ldrge	r1, [r4, #0]
 8006de4:	f021 0104 	bicge.w	r1, r1, #4
 8006de8:	6021      	strge	r1, [r4, #0]
 8006dea:	b90d      	cbnz	r5, 8006df0 <_printf_i+0x110>
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	d04b      	beq.n	8006e88 <_printf_i+0x1a8>
 8006df0:	4616      	mov	r6, r2
 8006df2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006df6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dfa:	5dc7      	ldrb	r7, [r0, r7]
 8006dfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e00:	462f      	mov	r7, r5
 8006e02:	42bb      	cmp	r3, r7
 8006e04:	460d      	mov	r5, r1
 8006e06:	d9f4      	bls.n	8006df2 <_printf_i+0x112>
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d10b      	bne.n	8006e24 <_printf_i+0x144>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07df      	lsls	r7, r3, #31
 8006e10:	d508      	bpl.n	8006e24 <_printf_i+0x144>
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	6861      	ldr	r1, [r4, #4]
 8006e16:	4299      	cmp	r1, r3
 8006e18:	bfde      	ittt	le
 8006e1a:	2330      	movle	r3, #48	@ 0x30
 8006e1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e24:	1b92      	subs	r2, r2, r6
 8006e26:	6122      	str	r2, [r4, #16]
 8006e28:	f8cd a000 	str.w	sl, [sp]
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	aa03      	add	r2, sp, #12
 8006e30:	4621      	mov	r1, r4
 8006e32:	4640      	mov	r0, r8
 8006e34:	f7ff fee6 	bl	8006c04 <_printf_common>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d14a      	bne.n	8006ed2 <_printf_i+0x1f2>
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e40:	b004      	add	sp, #16
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	f043 0320 	orr.w	r3, r3, #32
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	4833      	ldr	r0, [pc, #204]	@ (8006f1c <_printf_i+0x23c>)
 8006e50:	2778      	movs	r7, #120	@ 0x78
 8006e52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	6831      	ldr	r1, [r6, #0]
 8006e5a:	061f      	lsls	r7, r3, #24
 8006e5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e60:	d402      	bmi.n	8006e68 <_printf_i+0x188>
 8006e62:	065f      	lsls	r7, r3, #25
 8006e64:	bf48      	it	mi
 8006e66:	b2ad      	uxthmi	r5, r5
 8006e68:	6031      	str	r1, [r6, #0]
 8006e6a:	07d9      	lsls	r1, r3, #31
 8006e6c:	bf44      	itt	mi
 8006e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e72:	6023      	strmi	r3, [r4, #0]
 8006e74:	b11d      	cbz	r5, 8006e7e <_printf_i+0x19e>
 8006e76:	2310      	movs	r3, #16
 8006e78:	e7ac      	b.n	8006dd4 <_printf_i+0xf4>
 8006e7a:	4827      	ldr	r0, [pc, #156]	@ (8006f18 <_printf_i+0x238>)
 8006e7c:	e7e9      	b.n	8006e52 <_printf_i+0x172>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	f023 0320 	bic.w	r3, r3, #32
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	e7f6      	b.n	8006e76 <_printf_i+0x196>
 8006e88:	4616      	mov	r6, r2
 8006e8a:	e7bd      	b.n	8006e08 <_printf_i+0x128>
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	6825      	ldr	r5, [r4, #0]
 8006e90:	6961      	ldr	r1, [r4, #20]
 8006e92:	1d18      	adds	r0, r3, #4
 8006e94:	6030      	str	r0, [r6, #0]
 8006e96:	062e      	lsls	r6, r5, #24
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	d501      	bpl.n	8006ea0 <_printf_i+0x1c0>
 8006e9c:	6019      	str	r1, [r3, #0]
 8006e9e:	e002      	b.n	8006ea6 <_printf_i+0x1c6>
 8006ea0:	0668      	lsls	r0, r5, #25
 8006ea2:	d5fb      	bpl.n	8006e9c <_printf_i+0x1bc>
 8006ea4:	8019      	strh	r1, [r3, #0]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	4616      	mov	r6, r2
 8006eac:	e7bc      	b.n	8006e28 <_printf_i+0x148>
 8006eae:	6833      	ldr	r3, [r6, #0]
 8006eb0:	1d1a      	adds	r2, r3, #4
 8006eb2:	6032      	str	r2, [r6, #0]
 8006eb4:	681e      	ldr	r6, [r3, #0]
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7f9 f998 	bl	80001f0 <memchr>
 8006ec0:	b108      	cbz	r0, 8006ec6 <_printf_i+0x1e6>
 8006ec2:	1b80      	subs	r0, r0, r6
 8006ec4:	6060      	str	r0, [r4, #4]
 8006ec6:	6863      	ldr	r3, [r4, #4]
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed0:	e7aa      	b.n	8006e28 <_printf_i+0x148>
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	4640      	mov	r0, r8
 8006eda:	47d0      	blx	sl
 8006edc:	3001      	adds	r0, #1
 8006ede:	d0ad      	beq.n	8006e3c <_printf_i+0x15c>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	079b      	lsls	r3, r3, #30
 8006ee4:	d413      	bmi.n	8006f0e <_printf_i+0x22e>
 8006ee6:	68e0      	ldr	r0, [r4, #12]
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	4298      	cmp	r0, r3
 8006eec:	bfb8      	it	lt
 8006eee:	4618      	movlt	r0, r3
 8006ef0:	e7a6      	b.n	8006e40 <_printf_i+0x160>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4632      	mov	r2, r6
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	4640      	mov	r0, r8
 8006efa:	47d0      	blx	sl
 8006efc:	3001      	adds	r0, #1
 8006efe:	d09d      	beq.n	8006e3c <_printf_i+0x15c>
 8006f00:	3501      	adds	r5, #1
 8006f02:	68e3      	ldr	r3, [r4, #12]
 8006f04:	9903      	ldr	r1, [sp, #12]
 8006f06:	1a5b      	subs	r3, r3, r1
 8006f08:	42ab      	cmp	r3, r5
 8006f0a:	dcf2      	bgt.n	8006ef2 <_printf_i+0x212>
 8006f0c:	e7eb      	b.n	8006ee6 <_printf_i+0x206>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	f104 0619 	add.w	r6, r4, #25
 8006f14:	e7f5      	b.n	8006f02 <_printf_i+0x222>
 8006f16:	bf00      	nop
 8006f18:	08007b99 	.word	0x08007b99
 8006f1c:	08007baa 	.word	0x08007baa

08006f20 <_scanf_chars>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4615      	mov	r5, r2
 8006f26:	688a      	ldr	r2, [r1, #8]
 8006f28:	4680      	mov	r8, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	b932      	cbnz	r2, 8006f3c <_scanf_chars+0x1c>
 8006f2e:	698a      	ldr	r2, [r1, #24]
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	bf14      	ite	ne
 8006f34:	f04f 32ff 	movne.w	r2, #4294967295
 8006f38:	2201      	moveq	r2, #1
 8006f3a:	608a      	str	r2, [r1, #8]
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006fd0 <_scanf_chars+0xb0>
 8006f42:	06d1      	lsls	r1, r2, #27
 8006f44:	bf5f      	itttt	pl
 8006f46:	681a      	ldrpl	r2, [r3, #0]
 8006f48:	1d11      	addpl	r1, r2, #4
 8006f4a:	6019      	strpl	r1, [r3, #0]
 8006f4c:	6816      	ldrpl	r6, [r2, #0]
 8006f4e:	2700      	movs	r7, #0
 8006f50:	69a0      	ldr	r0, [r4, #24]
 8006f52:	b188      	cbz	r0, 8006f78 <_scanf_chars+0x58>
 8006f54:	2801      	cmp	r0, #1
 8006f56:	d107      	bne.n	8006f68 <_scanf_chars+0x48>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	6963      	ldr	r3, [r4, #20]
 8006f5e:	5c9b      	ldrb	r3, [r3, r2]
 8006f60:	b953      	cbnz	r3, 8006f78 <_scanf_chars+0x58>
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	d031      	beq.n	8006fca <_scanf_chars+0xaa>
 8006f66:	e022      	b.n	8006fae <_scanf_chars+0x8e>
 8006f68:	2802      	cmp	r0, #2
 8006f6a:	d120      	bne.n	8006fae <_scanf_chars+0x8e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006f74:	071b      	lsls	r3, r3, #28
 8006f76:	d41a      	bmi.n	8006fae <_scanf_chars+0x8e>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	06da      	lsls	r2, r3, #27
 8006f7c:	bf5e      	ittt	pl
 8006f7e:	682b      	ldrpl	r3, [r5, #0]
 8006f80:	781b      	ldrbpl	r3, [r3, #0]
 8006f82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006f86:	682a      	ldr	r2, [r5, #0]
 8006f88:	686b      	ldr	r3, [r5, #4]
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	68a2      	ldr	r2, [r4, #8]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	3a01      	subs	r2, #1
 8006f94:	606b      	str	r3, [r5, #4]
 8006f96:	3701      	adds	r7, #1
 8006f98:	60a2      	str	r2, [r4, #8]
 8006f9a:	b142      	cbz	r2, 8006fae <_scanf_chars+0x8e>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dcd7      	bgt.n	8006f50 <_scanf_chars+0x30>
 8006fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4798      	blx	r3
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d0d0      	beq.n	8006f50 <_scanf_chars+0x30>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f013 0310 	ands.w	r3, r3, #16
 8006fb4:	d105      	bne.n	8006fc2 <_scanf_chars+0xa2>
 8006fb6:	68e2      	ldr	r2, [r4, #12]
 8006fb8:	3201      	adds	r2, #1
 8006fba:	60e2      	str	r2, [r4, #12]
 8006fbc:	69a2      	ldr	r2, [r4, #24]
 8006fbe:	b102      	cbz	r2, 8006fc2 <_scanf_chars+0xa2>
 8006fc0:	7033      	strb	r3, [r6, #0]
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	443b      	add	r3, r7
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2000      	movs	r0, #0
 8006fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fce:	bf00      	nop
 8006fd0:	08007bd7 	.word	0x08007bd7

08006fd4 <_scanf_i>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	4698      	mov	r8, r3
 8006fda:	4b74      	ldr	r3, [pc, #464]	@ (80071ac <_scanf_i+0x1d8>)
 8006fdc:	460c      	mov	r4, r1
 8006fde:	4682      	mov	sl, r0
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	ab03      	add	r3, sp, #12
 8006fea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006fee:	4b70      	ldr	r3, [pc, #448]	@ (80071b0 <_scanf_i+0x1dc>)
 8006ff0:	69a1      	ldr	r1, [r4, #24]
 8006ff2:	4a70      	ldr	r2, [pc, #448]	@ (80071b4 <_scanf_i+0x1e0>)
 8006ff4:	2903      	cmp	r1, #3
 8006ff6:	bf08      	it	eq
 8006ff8:	461a      	moveq	r2, r3
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	1e5a      	subs	r2, r3, #1
 8007000:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007004:	bf88      	it	hi
 8007006:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800700a:	4627      	mov	r7, r4
 800700c:	bf82      	ittt	hi
 800700e:	eb03 0905 	addhi.w	r9, r3, r5
 8007012:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007016:	60a3      	strhi	r3, [r4, #8]
 8007018:	f857 3b1c 	ldr.w	r3, [r7], #28
 800701c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007020:	bf98      	it	ls
 8007022:	f04f 0900 	movls.w	r9, #0
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	463d      	mov	r5, r7
 800702a:	f04f 0b00 	mov.w	fp, #0
 800702e:	6831      	ldr	r1, [r6, #0]
 8007030:	ab03      	add	r3, sp, #12
 8007032:	7809      	ldrb	r1, [r1, #0]
 8007034:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007038:	2202      	movs	r2, #2
 800703a:	f7f9 f8d9 	bl	80001f0 <memchr>
 800703e:	b328      	cbz	r0, 800708c <_scanf_i+0xb8>
 8007040:	f1bb 0f01 	cmp.w	fp, #1
 8007044:	d159      	bne.n	80070fa <_scanf_i+0x126>
 8007046:	6862      	ldr	r2, [r4, #4]
 8007048:	b92a      	cbnz	r2, 8007056 <_scanf_i+0x82>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	2108      	movs	r1, #8
 800704e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007052:	6061      	str	r1, [r4, #4]
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	68a2      	ldr	r2, [r4, #8]
 8007060:	1e51      	subs	r1, r2, #1
 8007062:	60a1      	str	r1, [r4, #8]
 8007064:	b192      	cbz	r2, 800708c <_scanf_i+0xb8>
 8007066:	6832      	ldr	r2, [r6, #0]
 8007068:	1c51      	adds	r1, r2, #1
 800706a:	6031      	str	r1, [r6, #0]
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	f805 2b01 	strb.w	r2, [r5], #1
 8007072:	6872      	ldr	r2, [r6, #4]
 8007074:	3a01      	subs	r2, #1
 8007076:	2a00      	cmp	r2, #0
 8007078:	6072      	str	r2, [r6, #4]
 800707a:	dc07      	bgt.n	800708c <_scanf_i+0xb8>
 800707c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007080:	4631      	mov	r1, r6
 8007082:	4650      	mov	r0, sl
 8007084:	4790      	blx	r2
 8007086:	2800      	cmp	r0, #0
 8007088:	f040 8085 	bne.w	8007196 <_scanf_i+0x1c2>
 800708c:	f10b 0b01 	add.w	fp, fp, #1
 8007090:	f1bb 0f03 	cmp.w	fp, #3
 8007094:	d1cb      	bne.n	800702e <_scanf_i+0x5a>
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	b90b      	cbnz	r3, 800709e <_scanf_i+0xca>
 800709a:	230a      	movs	r3, #10
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	4945      	ldr	r1, [pc, #276]	@ (80071b8 <_scanf_i+0x1e4>)
 80070a2:	6960      	ldr	r0, [r4, #20]
 80070a4:	1ac9      	subs	r1, r1, r3
 80070a6:	f000 f889 	bl	80071bc <__sccl>
 80070aa:	f04f 0b00 	mov.w	fp, #0
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d03d      	beq.n	8007132 <_scanf_i+0x15e>
 80070b6:	6831      	ldr	r1, [r6, #0]
 80070b8:	6960      	ldr	r0, [r4, #20]
 80070ba:	f891 c000 	ldrb.w	ip, [r1]
 80070be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d035      	beq.n	8007132 <_scanf_i+0x15e>
 80070c6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80070ca:	d124      	bne.n	8007116 <_scanf_i+0x142>
 80070cc:	0510      	lsls	r0, r2, #20
 80070ce:	d522      	bpl.n	8007116 <_scanf_i+0x142>
 80070d0:	f10b 0b01 	add.w	fp, fp, #1
 80070d4:	f1b9 0f00 	cmp.w	r9, #0
 80070d8:	d003      	beq.n	80070e2 <_scanf_i+0x10e>
 80070da:	3301      	adds	r3, #1
 80070dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80070e0:	60a3      	str	r3, [r4, #8]
 80070e2:	6873      	ldr	r3, [r6, #4]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	6073      	str	r3, [r6, #4]
 80070ea:	dd1b      	ble.n	8007124 <_scanf_i+0x150>
 80070ec:	6833      	ldr	r3, [r6, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	60a3      	str	r3, [r4, #8]
 80070f8:	e7d9      	b.n	80070ae <_scanf_i+0xda>
 80070fa:	f1bb 0f02 	cmp.w	fp, #2
 80070fe:	d1ae      	bne.n	800705e <_scanf_i+0x8a>
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007106:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800710a:	d1bf      	bne.n	800708c <_scanf_i+0xb8>
 800710c:	2110      	movs	r1, #16
 800710e:	6061      	str	r1, [r4, #4]
 8007110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007114:	e7a2      	b.n	800705c <_scanf_i+0x88>
 8007116:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	780b      	ldrb	r3, [r1, #0]
 800711e:	f805 3b01 	strb.w	r3, [r5], #1
 8007122:	e7de      	b.n	80070e2 <_scanf_i+0x10e>
 8007124:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007128:	4631      	mov	r1, r6
 800712a:	4650      	mov	r0, sl
 800712c:	4798      	blx	r3
 800712e:	2800      	cmp	r0, #0
 8007130:	d0df      	beq.n	80070f2 <_scanf_i+0x11e>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	05d9      	lsls	r1, r3, #23
 8007136:	d50d      	bpl.n	8007154 <_scanf_i+0x180>
 8007138:	42bd      	cmp	r5, r7
 800713a:	d909      	bls.n	8007150 <_scanf_i+0x17c>
 800713c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007144:	4632      	mov	r2, r6
 8007146:	4650      	mov	r0, sl
 8007148:	4798      	blx	r3
 800714a:	f105 39ff 	add.w	r9, r5, #4294967295
 800714e:	464d      	mov	r5, r9
 8007150:	42bd      	cmp	r5, r7
 8007152:	d028      	beq.n	80071a6 <_scanf_i+0x1d2>
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	f012 0210 	ands.w	r2, r2, #16
 800715a:	d113      	bne.n	8007184 <_scanf_i+0x1b0>
 800715c:	702a      	strb	r2, [r5, #0]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	9e01      	ldr	r6, [sp, #4]
 8007162:	4639      	mov	r1, r7
 8007164:	4650      	mov	r0, sl
 8007166:	47b0      	blx	r6
 8007168:	f8d8 3000 	ldr.w	r3, [r8]
 800716c:	6821      	ldr	r1, [r4, #0]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	f8c8 2000 	str.w	r2, [r8]
 8007174:	f011 0f20 	tst.w	r1, #32
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	d00f      	beq.n	800719c <_scanf_i+0x1c8>
 800717c:	6018      	str	r0, [r3, #0]
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60e3      	str	r3, [r4, #12]
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	1bed      	subs	r5, r5, r7
 8007188:	445d      	add	r5, fp
 800718a:	442b      	add	r3, r5
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	2000      	movs	r0, #0
 8007190:	b007      	add	sp, #28
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	f04f 0b00 	mov.w	fp, #0
 800719a:	e7ca      	b.n	8007132 <_scanf_i+0x15e>
 800719c:	07ca      	lsls	r2, r1, #31
 800719e:	bf4c      	ite	mi
 80071a0:	8018      	strhmi	r0, [r3, #0]
 80071a2:	6018      	strpl	r0, [r3, #0]
 80071a4:	e7eb      	b.n	800717e <_scanf_i+0x1aa>
 80071a6:	2001      	movs	r0, #1
 80071a8:	e7f2      	b.n	8007190 <_scanf_i+0x1bc>
 80071aa:	bf00      	nop
 80071ac:	08007b64 	.word	0x08007b64
 80071b0:	08007465 	.word	0x08007465
 80071b4:	08007545 	.word	0x08007545
 80071b8:	08007bcb 	.word	0x08007bcb

080071bc <__sccl>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	780b      	ldrb	r3, [r1, #0]
 80071c0:	4604      	mov	r4, r0
 80071c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80071c4:	bf0b      	itete	eq
 80071c6:	784b      	ldrbeq	r3, [r1, #1]
 80071c8:	1c4a      	addne	r2, r1, #1
 80071ca:	1c8a      	addeq	r2, r1, #2
 80071cc:	2100      	movne	r1, #0
 80071ce:	bf08      	it	eq
 80071d0:	2101      	moveq	r1, #1
 80071d2:	3801      	subs	r0, #1
 80071d4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80071d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80071dc:	42a8      	cmp	r0, r5
 80071de:	d1fb      	bne.n	80071d8 <__sccl+0x1c>
 80071e0:	b90b      	cbnz	r3, 80071e6 <__sccl+0x2a>
 80071e2:	1e50      	subs	r0, r2, #1
 80071e4:	bd70      	pop	{r4, r5, r6, pc}
 80071e6:	f081 0101 	eor.w	r1, r1, #1
 80071ea:	54e1      	strb	r1, [r4, r3]
 80071ec:	4610      	mov	r0, r2
 80071ee:	4602      	mov	r2, r0
 80071f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80071f4:	2d2d      	cmp	r5, #45	@ 0x2d
 80071f6:	d005      	beq.n	8007204 <__sccl+0x48>
 80071f8:	2d5d      	cmp	r5, #93	@ 0x5d
 80071fa:	d016      	beq.n	800722a <__sccl+0x6e>
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	d0f1      	beq.n	80071e4 <__sccl+0x28>
 8007200:	462b      	mov	r3, r5
 8007202:	e7f2      	b.n	80071ea <__sccl+0x2e>
 8007204:	7846      	ldrb	r6, [r0, #1]
 8007206:	2e5d      	cmp	r6, #93	@ 0x5d
 8007208:	d0fa      	beq.n	8007200 <__sccl+0x44>
 800720a:	42b3      	cmp	r3, r6
 800720c:	dcf8      	bgt.n	8007200 <__sccl+0x44>
 800720e:	3002      	adds	r0, #2
 8007210:	461a      	mov	r2, r3
 8007212:	3201      	adds	r2, #1
 8007214:	4296      	cmp	r6, r2
 8007216:	54a1      	strb	r1, [r4, r2]
 8007218:	dcfb      	bgt.n	8007212 <__sccl+0x56>
 800721a:	1af2      	subs	r2, r6, r3
 800721c:	3a01      	subs	r2, #1
 800721e:	1c5d      	adds	r5, r3, #1
 8007220:	42b3      	cmp	r3, r6
 8007222:	bfa8      	it	ge
 8007224:	2200      	movge	r2, #0
 8007226:	18ab      	adds	r3, r5, r2
 8007228:	e7e1      	b.n	80071ee <__sccl+0x32>
 800722a:	4610      	mov	r0, r2
 800722c:	e7da      	b.n	80071e4 <__sccl+0x28>

0800722e <__submore>:
 800722e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	460c      	mov	r4, r1
 8007234:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723a:	4299      	cmp	r1, r3
 800723c:	d11d      	bne.n	800727a <__submore+0x4c>
 800723e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007242:	f7ff f92f 	bl	80064a4 <_malloc_r>
 8007246:	b918      	cbnz	r0, 8007250 <__submore+0x22>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007254:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007256:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800725a:	6360      	str	r0, [r4, #52]	@ 0x34
 800725c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007260:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007264:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007268:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800726c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007270:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007274:	6020      	str	r0, [r4, #0]
 8007276:	2000      	movs	r0, #0
 8007278:	e7e8      	b.n	800724c <__submore+0x1e>
 800727a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800727c:	0077      	lsls	r7, r6, #1
 800727e:	463a      	mov	r2, r7
 8007280:	f000 f848 	bl	8007314 <_realloc_r>
 8007284:	4605      	mov	r5, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d0de      	beq.n	8007248 <__submore+0x1a>
 800728a:	eb00 0806 	add.w	r8, r0, r6
 800728e:	4601      	mov	r1, r0
 8007290:	4632      	mov	r2, r6
 8007292:	4640      	mov	r0, r8
 8007294:	f000 f830 	bl	80072f8 <memcpy>
 8007298:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800729c:	f8c4 8000 	str.w	r8, [r4]
 80072a0:	e7e9      	b.n	8007276 <__submore+0x48>

080072a2 <memmove>:
 80072a2:	4288      	cmp	r0, r1
 80072a4:	b510      	push	{r4, lr}
 80072a6:	eb01 0402 	add.w	r4, r1, r2
 80072aa:	d902      	bls.n	80072b2 <memmove+0x10>
 80072ac:	4284      	cmp	r4, r0
 80072ae:	4623      	mov	r3, r4
 80072b0:	d807      	bhi.n	80072c2 <memmove+0x20>
 80072b2:	1e43      	subs	r3, r0, #1
 80072b4:	42a1      	cmp	r1, r4
 80072b6:	d008      	beq.n	80072ca <memmove+0x28>
 80072b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072c0:	e7f8      	b.n	80072b4 <memmove+0x12>
 80072c2:	4402      	add	r2, r0
 80072c4:	4601      	mov	r1, r0
 80072c6:	428a      	cmp	r2, r1
 80072c8:	d100      	bne.n	80072cc <memmove+0x2a>
 80072ca:	bd10      	pop	{r4, pc}
 80072cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072d4:	e7f7      	b.n	80072c6 <memmove+0x24>
	...

080072d8 <_sbrk_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d06      	ldr	r5, [pc, #24]	@ (80072f4 <_sbrk_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fa ff14 	bl	8002110 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_sbrk_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_sbrk_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	20000a10 	.word	0x20000a10

080072f8 <memcpy>:
 80072f8:	440a      	add	r2, r1
 80072fa:	4291      	cmp	r1, r2
 80072fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007300:	d100      	bne.n	8007304 <memcpy+0xc>
 8007302:	4770      	bx	lr
 8007304:	b510      	push	{r4, lr}
 8007306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800730a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730e:	4291      	cmp	r1, r2
 8007310:	d1f9      	bne.n	8007306 <memcpy+0xe>
 8007312:	bd10      	pop	{r4, pc}

08007314 <_realloc_r>:
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	4680      	mov	r8, r0
 800731a:	4615      	mov	r5, r2
 800731c:	460c      	mov	r4, r1
 800731e:	b921      	cbnz	r1, 800732a <_realloc_r+0x16>
 8007320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	4611      	mov	r1, r2
 8007326:	f7ff b8bd 	b.w	80064a4 <_malloc_r>
 800732a:	b92a      	cbnz	r2, 8007338 <_realloc_r+0x24>
 800732c:	f7ff f84e 	bl	80063cc <_free_r>
 8007330:	2400      	movs	r4, #0
 8007332:	4620      	mov	r0, r4
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	f000 f906 	bl	8007548 <_malloc_usable_size_r>
 800733c:	4285      	cmp	r5, r0
 800733e:	4606      	mov	r6, r0
 8007340:	d802      	bhi.n	8007348 <_realloc_r+0x34>
 8007342:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007346:	d8f4      	bhi.n	8007332 <_realloc_r+0x1e>
 8007348:	4629      	mov	r1, r5
 800734a:	4640      	mov	r0, r8
 800734c:	f7ff f8aa 	bl	80064a4 <_malloc_r>
 8007350:	4607      	mov	r7, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d0ec      	beq.n	8007330 <_realloc_r+0x1c>
 8007356:	42b5      	cmp	r5, r6
 8007358:	462a      	mov	r2, r5
 800735a:	4621      	mov	r1, r4
 800735c:	bf28      	it	cs
 800735e:	4632      	movcs	r2, r6
 8007360:	f7ff ffca 	bl	80072f8 <memcpy>
 8007364:	4621      	mov	r1, r4
 8007366:	4640      	mov	r0, r8
 8007368:	f7ff f830 	bl	80063cc <_free_r>
 800736c:	463c      	mov	r4, r7
 800736e:	e7e0      	b.n	8007332 <_realloc_r+0x1e>

08007370 <_strtol_l.constprop.0>:
 8007370:	2b24      	cmp	r3, #36	@ 0x24
 8007372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007376:	4686      	mov	lr, r0
 8007378:	4690      	mov	r8, r2
 800737a:	d801      	bhi.n	8007380 <_strtol_l.constprop.0+0x10>
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <_strtol_l.constprop.0+0x1e>
 8007380:	f7fe fff8 	bl	8006374 <__errno>
 8007384:	2316      	movs	r3, #22
 8007386:	6003      	str	r3, [r0, #0]
 8007388:	2000      	movs	r0, #0
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	4834      	ldr	r0, [pc, #208]	@ (8007460 <_strtol_l.constprop.0+0xf0>)
 8007390:	460d      	mov	r5, r1
 8007392:	462a      	mov	r2, r5
 8007394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007398:	5d06      	ldrb	r6, [r0, r4]
 800739a:	f016 0608 	ands.w	r6, r6, #8
 800739e:	d1f8      	bne.n	8007392 <_strtol_l.constprop.0+0x22>
 80073a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80073a2:	d12d      	bne.n	8007400 <_strtol_l.constprop.0+0x90>
 80073a4:	782c      	ldrb	r4, [r5, #0]
 80073a6:	2601      	movs	r6, #1
 80073a8:	1c95      	adds	r5, r2, #2
 80073aa:	f033 0210 	bics.w	r2, r3, #16
 80073ae:	d109      	bne.n	80073c4 <_strtol_l.constprop.0+0x54>
 80073b0:	2c30      	cmp	r4, #48	@ 0x30
 80073b2:	d12a      	bne.n	800740a <_strtol_l.constprop.0+0x9a>
 80073b4:	782a      	ldrb	r2, [r5, #0]
 80073b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073ba:	2a58      	cmp	r2, #88	@ 0x58
 80073bc:	d125      	bne.n	800740a <_strtol_l.constprop.0+0x9a>
 80073be:	786c      	ldrb	r4, [r5, #1]
 80073c0:	2310      	movs	r3, #16
 80073c2:	3502      	adds	r5, #2
 80073c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80073c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073cc:	2200      	movs	r2, #0
 80073ce:	fbbc f9f3 	udiv	r9, ip, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80073d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073dc:	2f09      	cmp	r7, #9
 80073de:	d81b      	bhi.n	8007418 <_strtol_l.constprop.0+0xa8>
 80073e0:	463c      	mov	r4, r7
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	dd27      	ble.n	8007436 <_strtol_l.constprop.0+0xc6>
 80073e6:	1c57      	adds	r7, r2, #1
 80073e8:	d007      	beq.n	80073fa <_strtol_l.constprop.0+0x8a>
 80073ea:	4581      	cmp	r9, r0
 80073ec:	d320      	bcc.n	8007430 <_strtol_l.constprop.0+0xc0>
 80073ee:	d101      	bne.n	80073f4 <_strtol_l.constprop.0+0x84>
 80073f0:	45a2      	cmp	sl, r4
 80073f2:	db1d      	blt.n	8007430 <_strtol_l.constprop.0+0xc0>
 80073f4:	fb00 4003 	mla	r0, r0, r3, r4
 80073f8:	2201      	movs	r2, #1
 80073fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fe:	e7eb      	b.n	80073d8 <_strtol_l.constprop.0+0x68>
 8007400:	2c2b      	cmp	r4, #43	@ 0x2b
 8007402:	bf04      	itt	eq
 8007404:	782c      	ldrbeq	r4, [r5, #0]
 8007406:	1c95      	addeq	r5, r2, #2
 8007408:	e7cf      	b.n	80073aa <_strtol_l.constprop.0+0x3a>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1da      	bne.n	80073c4 <_strtol_l.constprop.0+0x54>
 800740e:	2c30      	cmp	r4, #48	@ 0x30
 8007410:	bf0c      	ite	eq
 8007412:	2308      	moveq	r3, #8
 8007414:	230a      	movne	r3, #10
 8007416:	e7d5      	b.n	80073c4 <_strtol_l.constprop.0+0x54>
 8007418:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800741c:	2f19      	cmp	r7, #25
 800741e:	d801      	bhi.n	8007424 <_strtol_l.constprop.0+0xb4>
 8007420:	3c37      	subs	r4, #55	@ 0x37
 8007422:	e7de      	b.n	80073e2 <_strtol_l.constprop.0+0x72>
 8007424:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007428:	2f19      	cmp	r7, #25
 800742a:	d804      	bhi.n	8007436 <_strtol_l.constprop.0+0xc6>
 800742c:	3c57      	subs	r4, #87	@ 0x57
 800742e:	e7d8      	b.n	80073e2 <_strtol_l.constprop.0+0x72>
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	e7e1      	b.n	80073fa <_strtol_l.constprop.0+0x8a>
 8007436:	1c53      	adds	r3, r2, #1
 8007438:	d108      	bne.n	800744c <_strtol_l.constprop.0+0xdc>
 800743a:	2322      	movs	r3, #34	@ 0x22
 800743c:	f8ce 3000 	str.w	r3, [lr]
 8007440:	4660      	mov	r0, ip
 8007442:	f1b8 0f00 	cmp.w	r8, #0
 8007446:	d0a0      	beq.n	800738a <_strtol_l.constprop.0+0x1a>
 8007448:	1e69      	subs	r1, r5, #1
 800744a:	e006      	b.n	800745a <_strtol_l.constprop.0+0xea>
 800744c:	b106      	cbz	r6, 8007450 <_strtol_l.constprop.0+0xe0>
 800744e:	4240      	negs	r0, r0
 8007450:	f1b8 0f00 	cmp.w	r8, #0
 8007454:	d099      	beq.n	800738a <_strtol_l.constprop.0+0x1a>
 8007456:	2a00      	cmp	r2, #0
 8007458:	d1f6      	bne.n	8007448 <_strtol_l.constprop.0+0xd8>
 800745a:	f8c8 1000 	str.w	r1, [r8]
 800745e:	e794      	b.n	800738a <_strtol_l.constprop.0+0x1a>
 8007460:	08007bd7 	.word	0x08007bd7

08007464 <_strtol_r>:
 8007464:	f7ff bf84 	b.w	8007370 <_strtol_l.constprop.0>

08007468 <_strtoul_l.constprop.0>:
 8007468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800746c:	4e34      	ldr	r6, [pc, #208]	@ (8007540 <_strtoul_l.constprop.0+0xd8>)
 800746e:	4686      	mov	lr, r0
 8007470:	460d      	mov	r5, r1
 8007472:	4628      	mov	r0, r5
 8007474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007478:	5d37      	ldrb	r7, [r6, r4]
 800747a:	f017 0708 	ands.w	r7, r7, #8
 800747e:	d1f8      	bne.n	8007472 <_strtoul_l.constprop.0+0xa>
 8007480:	2c2d      	cmp	r4, #45	@ 0x2d
 8007482:	d12f      	bne.n	80074e4 <_strtoul_l.constprop.0+0x7c>
 8007484:	782c      	ldrb	r4, [r5, #0]
 8007486:	2701      	movs	r7, #1
 8007488:	1c85      	adds	r5, r0, #2
 800748a:	f033 0010 	bics.w	r0, r3, #16
 800748e:	d109      	bne.n	80074a4 <_strtoul_l.constprop.0+0x3c>
 8007490:	2c30      	cmp	r4, #48	@ 0x30
 8007492:	d12c      	bne.n	80074ee <_strtoul_l.constprop.0+0x86>
 8007494:	7828      	ldrb	r0, [r5, #0]
 8007496:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800749a:	2858      	cmp	r0, #88	@ 0x58
 800749c:	d127      	bne.n	80074ee <_strtoul_l.constprop.0+0x86>
 800749e:	786c      	ldrb	r4, [r5, #1]
 80074a0:	2310      	movs	r3, #16
 80074a2:	3502      	adds	r5, #2
 80074a4:	f04f 38ff 	mov.w	r8, #4294967295
 80074a8:	2600      	movs	r6, #0
 80074aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80074ae:	fb03 f908 	mul.w	r9, r3, r8
 80074b2:	ea6f 0909 	mvn.w	r9, r9
 80074b6:	4630      	mov	r0, r6
 80074b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80074bc:	f1bc 0f09 	cmp.w	ip, #9
 80074c0:	d81c      	bhi.n	80074fc <_strtoul_l.constprop.0+0x94>
 80074c2:	4664      	mov	r4, ip
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	dd2a      	ble.n	800751e <_strtoul_l.constprop.0+0xb6>
 80074c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80074cc:	d007      	beq.n	80074de <_strtoul_l.constprop.0+0x76>
 80074ce:	4580      	cmp	r8, r0
 80074d0:	d322      	bcc.n	8007518 <_strtoul_l.constprop.0+0xb0>
 80074d2:	d101      	bne.n	80074d8 <_strtoul_l.constprop.0+0x70>
 80074d4:	45a1      	cmp	r9, r4
 80074d6:	db1f      	blt.n	8007518 <_strtoul_l.constprop.0+0xb0>
 80074d8:	fb00 4003 	mla	r0, r0, r3, r4
 80074dc:	2601      	movs	r6, #1
 80074de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074e2:	e7e9      	b.n	80074b8 <_strtoul_l.constprop.0+0x50>
 80074e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80074e6:	bf04      	itt	eq
 80074e8:	782c      	ldrbeq	r4, [r5, #0]
 80074ea:	1c85      	addeq	r5, r0, #2
 80074ec:	e7cd      	b.n	800748a <_strtoul_l.constprop.0+0x22>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1d8      	bne.n	80074a4 <_strtoul_l.constprop.0+0x3c>
 80074f2:	2c30      	cmp	r4, #48	@ 0x30
 80074f4:	bf0c      	ite	eq
 80074f6:	2308      	moveq	r3, #8
 80074f8:	230a      	movne	r3, #10
 80074fa:	e7d3      	b.n	80074a4 <_strtoul_l.constprop.0+0x3c>
 80074fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007500:	f1bc 0f19 	cmp.w	ip, #25
 8007504:	d801      	bhi.n	800750a <_strtoul_l.constprop.0+0xa2>
 8007506:	3c37      	subs	r4, #55	@ 0x37
 8007508:	e7dc      	b.n	80074c4 <_strtoul_l.constprop.0+0x5c>
 800750a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800750e:	f1bc 0f19 	cmp.w	ip, #25
 8007512:	d804      	bhi.n	800751e <_strtoul_l.constprop.0+0xb6>
 8007514:	3c57      	subs	r4, #87	@ 0x57
 8007516:	e7d5      	b.n	80074c4 <_strtoul_l.constprop.0+0x5c>
 8007518:	f04f 36ff 	mov.w	r6, #4294967295
 800751c:	e7df      	b.n	80074de <_strtoul_l.constprop.0+0x76>
 800751e:	1c73      	adds	r3, r6, #1
 8007520:	d106      	bne.n	8007530 <_strtoul_l.constprop.0+0xc8>
 8007522:	2322      	movs	r3, #34	@ 0x22
 8007524:	f8ce 3000 	str.w	r3, [lr]
 8007528:	4630      	mov	r0, r6
 800752a:	b932      	cbnz	r2, 800753a <_strtoul_l.constprop.0+0xd2>
 800752c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007530:	b107      	cbz	r7, 8007534 <_strtoul_l.constprop.0+0xcc>
 8007532:	4240      	negs	r0, r0
 8007534:	2a00      	cmp	r2, #0
 8007536:	d0f9      	beq.n	800752c <_strtoul_l.constprop.0+0xc4>
 8007538:	b106      	cbz	r6, 800753c <_strtoul_l.constprop.0+0xd4>
 800753a:	1e69      	subs	r1, r5, #1
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	e7f5      	b.n	800752c <_strtoul_l.constprop.0+0xc4>
 8007540:	08007bd7 	.word	0x08007bd7

08007544 <_strtoul_r>:
 8007544:	f7ff bf90 	b.w	8007468 <_strtoul_l.constprop.0>

08007548 <_malloc_usable_size_r>:
 8007548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754c:	1f18      	subs	r0, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfbc      	itt	lt
 8007552:	580b      	ldrlt	r3, [r1, r0]
 8007554:	18c0      	addlt	r0, r0, r3
 8007556:	4770      	bx	lr

08007558 <_init>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr

08007564 <_fini>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr
